//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.1432.
// 
namespace Library.LabServer.Drivers.Equipment {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="RadioactivityServiceSoap", Namespace="http://ilab.uq.edu.au/")]
    public partial class RadioactivityService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        public AuthHeader AuthHeaderValue;
        
        private System.Threading.SendOrPostCallback ExecuteCommandOperationCompleted;
        
        /// <remarks/>
        public RadioactivityService() {
            this.Url = "http://localhost:8087/Radioactivity.asmx";
        }
        
        /// <remarks/>
        public event ExecuteCommandCompletedEventHandler ExecuteCommandCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.uq.edu.au/ExecuteCommand", RequestNamespace="http://ilab.uq.edu.au/", ResponseNamespace="http://ilab.uq.edu.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EquipmentResult ExecuteCommand(EquipmentCommands command, int param1, int param2, string param3) {
            object[] results = this.Invoke("ExecuteCommand", new object[] {
                        command,
                        param1,
                        param2,
                        param3});
            return ((EquipmentResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExecuteCommand(EquipmentCommands command, int param1, int param2, string param3, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteCommand", new object[] {
                        command,
                        param1,
                        param2,
                        param3}, callback, asyncState);
        }
        
        /// <remarks/>
        public EquipmentResult EndExecuteCommand(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((EquipmentResult)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteCommandAsync(EquipmentCommands command, int param1, int param2, string param3) {
            this.ExecuteCommandAsync(command, param1, param2, param3, null);
        }
        
        /// <remarks/>
        public void ExecuteCommandAsync(EquipmentCommands command, int param1, int param2, string param3, object userState) {
            if ((this.ExecuteCommandOperationCompleted == null)) {
                this.ExecuteCommandOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteCommandOperationCompleted);
            }
            this.InvokeAsync("ExecuteCommand", new object[] {
                        command,
                        param1,
                        param2,
                        param3}, this.ExecuteCommandOperationCompleted, userState);
        }
        
        private void OnExecuteCommandOperationCompleted(object arg) {
            if ((this.ExecuteCommandCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteCommandCompleted(this, new ExecuteCommandCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ilab.uq.edu.au/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://ilab.uq.edu.au/", IsNullable=false)]
    public partial class AuthHeader : System.Web.Services.Protocols.SoapHeader {
        
        /// <remarks/>
        public string identifier;
        
        /// <remarks/>
        public string passKey;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ilab.uq.edu.au/")]
    public partial class EquipmentResult {
        
        /// <remarks/>
        public bool boolValue;
        
        /// <remarks/>
        public int intValue;
        
        /// <remarks/>
        public string errorMessage;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ilab.uq.edu.au/")]
    public enum EquipmentCommands {
        
        /// <remarks/>
        GetTimeUntilReady,
        
        /// <remarks/>
        GetTubeHomeDistance,
        
        /// <remarks/>
        GetTubeMoveTime,
        
        /// <remarks/>
        GetSourceHomeLocation,
        
        /// <remarks/>
        GetSourceSelectTime,
        
        /// <remarks/>
        GetSourceReturnTime,
        
        /// <remarks/>
        GetAbsorberHomeLocation,
        
        /// <remarks/>
        GetAbsorberSelectTime,
        
        /// <remarks/>
        GetAbsorberReturnTime,
        
        /// <remarks/>
        SuspendPowerdown,
        
        /// <remarks/>
        ResumePowerdown,
        
        /// <remarks/>
        SetTubeDistance,
        
        /// <remarks/>
        SetSourceLocation,
        
        /// <remarks/>
        SetAbsorberLocation,
        
        /// <remarks/>
        GetCaptureData,
        
        /// <remarks/>
        WriteLcdLine,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void ExecuteCommandCompletedEventHandler(object sender, ExecuteCommandCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteCommandCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteCommandCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EquipmentResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EquipmentResult)(this.results[0]));
            }
        }
    }
}
