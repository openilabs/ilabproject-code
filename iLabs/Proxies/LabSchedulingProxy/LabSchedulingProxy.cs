//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace iLabs.Services {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;

    using iLabs.DataTypes;
    using iLabs.DataTypes.ProcessAgentTypes;
    using iLabs.DataTypes.SchedulingTypes;
    using iLabs.DataTypes.SoapHeaderTypes;
    using iLabs.DataTypes.TicketingTypes;
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ILSS", Namespace="http://ilab.mit.edu/iLabs/Services")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AuthenticationHeader))]
    public partial class LabSchedulingProxy : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        public OperationAuthHeader OperationAuthHeaderValue;
        
        private System.Threading.SendOrPostCallback RetrieveAvailableTimePeriodsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveAvailableTimeBlocksOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConfirmReservationOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveReservationOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveTimeSlotsOperationCompleted;
        
        public AgentAuthHeader AgentAuthHeaderValue;
        
        private System.Threading.SendOrPostCallback AddUSSInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCredentialSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveCredentialSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddExperimentInfoOperationCompleted;
        
        /// <remarks/>
        public LabSchedulingProxy() {
            this.Url = "http://localhost/ilabwsdl/I_LSS.asmx";
        }
        
        /// <remarks/>
        public event RetrieveAvailableTimePeriodsCompletedEventHandler RetrieveAvailableTimePeriodsCompleted;
        
        /// <remarks/>
        public event RetrieveAvailableTimeBlocksCompletedEventHandler RetrieveAvailableTimeBlocksCompleted;
        
        /// <remarks/>
        public event ConfirmReservationCompletedEventHandler ConfirmReservationCompleted;
        
        /// <remarks/>
        public event RemoveReservationCompletedEventHandler RemoveReservationCompleted;
        
        /// <remarks/>
        public event RetrieveTimeSlotsCompletedEventHandler RetrieveTimeSlotsCompleted;
        
        /// <remarks/>
        public event AddUSSInfoCompletedEventHandler AddUSSInfoCompleted;
        
        /// <remarks/>
        public event AddCredentialSetCompletedEventHandler AddCredentialSetCompleted;
        
        /// <remarks/>
        public event RemoveCredentialSetCompletedEventHandler RemoveCredentialSetCompleted;
        
        /// <remarks/>
        public event AddExperimentInfoCompletedEventHandler AddExperimentInfoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RetrieveAvailableTimePeriods", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TimePeriod[] RetrieveAvailableTimePeriods(string serviceBrokerGuid, string groupName, string ussGuid, string clientGuid, string labServerGuid, System.DateTime startTime, System.DateTime endTime) {
            object[] results = this.Invoke("RetrieveAvailableTimePeriods", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        ussGuid,
                        clientGuid,
                        labServerGuid,
                        startTime,
                        endTime});
            return ((TimePeriod[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRetrieveAvailableTimePeriods(string serviceBrokerGuid, string groupName, string ussGuid, string clientGuid, string labServerGuid, System.DateTime startTime, System.DateTime endTime, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetrieveAvailableTimePeriods", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        ussGuid,
                        clientGuid,
                        labServerGuid,
                        startTime,
                        endTime}, callback, asyncState);
        }
        
        /// <remarks/>
        public TimePeriod[] EndRetrieveAvailableTimePeriods(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TimePeriod[])(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveAvailableTimePeriodsAsync(string serviceBrokerGuid, string groupName, string ussGuid, string clientGuid, string labServerGuid, System.DateTime startTime, System.DateTime endTime) {
            this.RetrieveAvailableTimePeriodsAsync(serviceBrokerGuid, groupName, ussGuid, clientGuid, labServerGuid, startTime, endTime, null);
        }
        
        /// <remarks/>
        public void RetrieveAvailableTimePeriodsAsync(string serviceBrokerGuid, string groupName, string ussGuid, string clientGuid, string labServerGuid, System.DateTime startTime, System.DateTime endTime, object userState) {
            if ((this.RetrieveAvailableTimePeriodsOperationCompleted == null)) {
                this.RetrieveAvailableTimePeriodsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAvailableTimePeriodsOperationCompleted);
            }
            this.InvokeAsync("RetrieveAvailableTimePeriods", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        ussGuid,
                        clientGuid,
                        labServerGuid,
                        startTime,
                        endTime}, this.RetrieveAvailableTimePeriodsOperationCompleted, userState);
        }
        
        private void OnRetrieveAvailableTimePeriodsOperationCompleted(object arg) {
            if ((this.RetrieveAvailableTimePeriodsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAvailableTimePeriodsCompleted(this, new RetrieveAvailableTimePeriodsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RetrieveAvailableTimeBlocks", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public TimeBlock[] RetrieveAvailableTimeBlocks(string serviceBrokerGuid, string groupName, string ussGuid, string clientGuid, string labServerGuid, System.DateTime startTime, System.DateTime endTime) {
            object[] results = this.Invoke("RetrieveAvailableTimeBlocks", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        ussGuid,
                        clientGuid,
                        labServerGuid,
                        startTime,
                        endTime});
            return ((TimeBlock[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRetrieveAvailableTimeBlocks(string serviceBrokerGuid, string groupName, string ussGuid, string clientGuid, string labServerGuid, System.DateTime startTime, System.DateTime endTime, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetrieveAvailableTimeBlocks", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        ussGuid,
                        clientGuid,
                        labServerGuid,
                        startTime,
                        endTime}, callback, asyncState);
        }
        
        /// <remarks/>
        public TimeBlock[] EndRetrieveAvailableTimeBlocks(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TimeBlock[])(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveAvailableTimeBlocksAsync(string serviceBrokerGuid, string groupName, string ussGuid, string clientGuid, string labServerGuid, System.DateTime startTime, System.DateTime endTime) {
            this.RetrieveAvailableTimeBlocksAsync(serviceBrokerGuid, groupName, ussGuid, clientGuid, labServerGuid, startTime, endTime, null);
        }
        
        /// <remarks/>
        public void RetrieveAvailableTimeBlocksAsync(string serviceBrokerGuid, string groupName, string ussGuid, string clientGuid, string labServerGuid, System.DateTime startTime, System.DateTime endTime, object userState) {
            if ((this.RetrieveAvailableTimeBlocksOperationCompleted == null)) {
                this.RetrieveAvailableTimeBlocksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAvailableTimeBlocksOperationCompleted);
            }
            this.InvokeAsync("RetrieveAvailableTimeBlocks", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        ussGuid,
                        clientGuid,
                        labServerGuid,
                        startTime,
                        endTime}, this.RetrieveAvailableTimeBlocksOperationCompleted, userState);
        }
        
        private void OnRetrieveAvailableTimeBlocksOperationCompleted(object arg) {
            if ((this.RetrieveAvailableTimeBlocksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAvailableTimeBlocksCompleted(this, new RetrieveAvailableTimeBlocksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/ConfirmReservation", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ConfirmReservation(string serviceBrokerGuid, string groupName, string ussGuid, string clientGuid, string labServerGuid, System.DateTime startTime, System.DateTime endTime) {
            object[] results = this.Invoke("ConfirmReservation", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        ussGuid,
                        clientGuid,
                        labServerGuid,
                        startTime,
                        endTime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConfirmReservation(string serviceBrokerGuid, string groupName, string ussGuid, string clientGuid, string labServerGuid, System.DateTime startTime, System.DateTime endTime, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConfirmReservation", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        ussGuid,
                        clientGuid,
                        labServerGuid,
                        startTime,
                        endTime}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndConfirmReservation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ConfirmReservationAsync(string serviceBrokerGuid, string groupName, string ussGuid, string clientGuid, string labServerGuid, System.DateTime startTime, System.DateTime endTime) {
            this.ConfirmReservationAsync(serviceBrokerGuid, groupName, ussGuid, clientGuid, labServerGuid, startTime, endTime, null);
        }
        
        /// <remarks/>
        public void ConfirmReservationAsync(string serviceBrokerGuid, string groupName, string ussGuid, string clientGuid, string labServerGuid, System.DateTime startTime, System.DateTime endTime, object userState) {
            if ((this.ConfirmReservationOperationCompleted == null)) {
                this.ConfirmReservationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConfirmReservationOperationCompleted);
            }
            this.InvokeAsync("ConfirmReservation", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        ussGuid,
                        clientGuid,
                        labServerGuid,
                        startTime,
                        endTime}, this.ConfirmReservationOperationCompleted, userState);
        }
        
        private void OnConfirmReservationOperationCompleted(object arg) {
            if ((this.ConfirmReservationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConfirmReservationCompleted(this, new ConfirmReservationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RemoveReservation", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveReservation(string serviceBrokerGuid, string groupName, string ussGuid, string clientGuid, string labServerGuid, System.DateTime startTime, System.DateTime endTime) {
            object[] results = this.Invoke("RemoveReservation", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        ussGuid,
                        clientGuid,
                        labServerGuid,
                        startTime,
                        endTime});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveReservation(string serviceBrokerGuid, string groupName, string ussGuid, string clientGuid, string labServerGuid, System.DateTime startTime, System.DateTime endTime, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveReservation", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        ussGuid,
                        clientGuid,
                        labServerGuid,
                        startTime,
                        endTime}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndRemoveReservation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveReservationAsync(string serviceBrokerGuid, string groupName, string ussGuid, string clientGuid, string labServerGuid, System.DateTime startTime, System.DateTime endTime) {
            this.RemoveReservationAsync(serviceBrokerGuid, groupName, ussGuid, clientGuid, labServerGuid, startTime, endTime, null);
        }
        
        /// <remarks/>
        public void RemoveReservationAsync(string serviceBrokerGuid, string groupName, string ussGuid, string clientGuid, string labServerGuid, System.DateTime startTime, System.DateTime endTime, object userState) {
            if ((this.RemoveReservationOperationCompleted == null)) {
                this.RemoveReservationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveReservationOperationCompleted);
            }
            this.InvokeAsync("RemoveReservation", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        ussGuid,
                        clientGuid,
                        labServerGuid,
                        startTime,
                        endTime}, this.RemoveReservationOperationCompleted, userState);
        }
        
        private void OnRemoveReservationOperationCompleted(object arg) {
            if ((this.RemoveReservationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveReservationCompleted(this, new RemoveReservationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RetrieveTimeSlots", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TimePeriod[] RetrieveTimeSlots(string serviceBrokerGuid, string groupName, string clientGuid, string labServerGuid, System.DateTime startTime, System.DateTime endTime) {
            object[] results = this.Invoke("RetrieveTimeSlots", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        clientGuid,
                        labServerGuid,
                        startTime,
                        endTime});
            return ((TimePeriod[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRetrieveTimeSlots(string serviceBrokerGuid, string groupName, string clientGuid, string labServerGuid, System.DateTime startTime, System.DateTime endTime, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetrieveTimeSlots", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        clientGuid,
                        labServerGuid,
                        startTime,
                        endTime}, callback, asyncState);
        }
        
        /// <remarks/>
        public TimePeriod[] EndRetrieveTimeSlots(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TimePeriod[])(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveTimeSlotsAsync(string serviceBrokerGuid, string groupName, string clientGuid, string labServerGuid, System.DateTime startTime, System.DateTime endTime) {
            this.RetrieveTimeSlotsAsync(serviceBrokerGuid, groupName, clientGuid, labServerGuid, startTime, endTime, null);
        }
        
        /// <remarks/>
        public void RetrieveTimeSlotsAsync(string serviceBrokerGuid, string groupName, string clientGuid, string labServerGuid, System.DateTime startTime, System.DateTime endTime, object userState) {
            if ((this.RetrieveTimeSlotsOperationCompleted == null)) {
                this.RetrieveTimeSlotsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveTimeSlotsOperationCompleted);
            }
            this.InvokeAsync("RetrieveTimeSlots", new object[] {
                        serviceBrokerGuid,
                        groupName,
                        clientGuid,
                        labServerGuid,
                        startTime,
                        endTime}, this.RetrieveTimeSlotsOperationCompleted, userState);
        }
        
        private void OnRetrieveTimeSlotsOperationCompleted(object arg) {
            if ((this.RetrieveTimeSlotsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveTimeSlotsCompleted(this, new RetrieveTimeSlotsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/AddUSSInfo", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddUSSInfo(string ussGuid, string ussName, string ussUrl, Coupon coupon) {
            object[] results = this.Invoke("AddUSSInfo", new object[] {
                        ussGuid,
                        ussName,
                        ussUrl,
                        coupon});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddUSSInfo(string ussGuid, string ussName, string ussUrl, Coupon coupon, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddUSSInfo", new object[] {
                        ussGuid,
                        ussName,
                        ussUrl,
                        coupon}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndAddUSSInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddUSSInfoAsync(string ussGuid, string ussName, string ussUrl, Coupon coupon) {
            this.AddUSSInfoAsync(ussGuid, ussName, ussUrl, coupon, null);
        }
        
        /// <remarks/>
        public void AddUSSInfoAsync(string ussGuid, string ussName, string ussUrl, Coupon coupon, object userState) {
            if ((this.AddUSSInfoOperationCompleted == null)) {
                this.AddUSSInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUSSInfoOperationCompleted);
            }
            this.InvokeAsync("AddUSSInfo", new object[] {
                        ussGuid,
                        ussName,
                        ussUrl,
                        coupon}, this.AddUSSInfoOperationCompleted, userState);
        }
        
        private void OnAddUSSInfoOperationCompleted(object arg) {
            if ((this.AddUSSInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUSSInfoCompleted(this, new AddUSSInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/AddCredentialSet", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddCredentialSet(string serviceBrokerGuid, string serviceBrokerName, string groupName, string ussGuid) {
            object[] results = this.Invoke("AddCredentialSet", new object[] {
                        serviceBrokerGuid,
                        serviceBrokerName,
                        groupName,
                        ussGuid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddCredentialSet(string serviceBrokerGuid, string serviceBrokerName, string groupName, string ussGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddCredentialSet", new object[] {
                        serviceBrokerGuid,
                        serviceBrokerName,
                        groupName,
                        ussGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndAddCredentialSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddCredentialSetAsync(string serviceBrokerGuid, string serviceBrokerName, string groupName, string ussGuid) {
            this.AddCredentialSetAsync(serviceBrokerGuid, serviceBrokerName, groupName, ussGuid, null);
        }
        
        /// <remarks/>
        public void AddCredentialSetAsync(string serviceBrokerGuid, string serviceBrokerName, string groupName, string ussGuid, object userState) {
            if ((this.AddCredentialSetOperationCompleted == null)) {
                this.AddCredentialSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCredentialSetOperationCompleted);
            }
            this.InvokeAsync("AddCredentialSet", new object[] {
                        serviceBrokerGuid,
                        serviceBrokerName,
                        groupName,
                        ussGuid}, this.AddCredentialSetOperationCompleted, userState);
        }
        
        private void OnAddCredentialSetOperationCompleted(object arg) {
            if ((this.AddCredentialSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCredentialSetCompleted(this, new AddCredentialSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RemoveCredentialSet", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveCredentialSet(string serviceBrokerGuid, string serviceBrokerName, string groupName, string ussGuid) {
            object[] results = this.Invoke("RemoveCredentialSet", new object[] {
                        serviceBrokerGuid,
                        serviceBrokerName,
                        groupName,
                        ussGuid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveCredentialSet(string serviceBrokerGuid, string serviceBrokerName, string groupName, string ussGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveCredentialSet", new object[] {
                        serviceBrokerGuid,
                        serviceBrokerName,
                        groupName,
                        ussGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndRemoveCredentialSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveCredentialSetAsync(string serviceBrokerGuid, string serviceBrokerName, string groupName, string ussGuid) {
            this.RemoveCredentialSetAsync(serviceBrokerGuid, serviceBrokerName, groupName, ussGuid, null);
        }
        
        /// <remarks/>
        public void RemoveCredentialSetAsync(string serviceBrokerGuid, string serviceBrokerName, string groupName, string ussGuid, object userState) {
            if ((this.RemoveCredentialSetOperationCompleted == null)) {
                this.RemoveCredentialSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveCredentialSetOperationCompleted);
            }
            this.InvokeAsync("RemoveCredentialSet", new object[] {
                        serviceBrokerGuid,
                        serviceBrokerName,
                        groupName,
                        ussGuid}, this.RemoveCredentialSetOperationCompleted, userState);
        }
        
        private void OnRemoveCredentialSetOperationCompleted(object arg) {
            if ((this.RemoveCredentialSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveCredentialSetCompleted(this, new RemoveCredentialSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/AddExperimentInfo", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddExperimentInfo(string labServerGuid, string labServerName, string clientGuid, string clientName, string clientVersion, string providerName) {
            object[] results = this.Invoke("AddExperimentInfo", new object[] {
                        labServerGuid,
                        labServerName,
                        clientGuid,
                        clientName,
                        clientVersion,
                        providerName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddExperimentInfo(string labServerGuid, string labServerName, string clientGuid, string clientName, string clientVersion, string providerName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddExperimentInfo", new object[] {
                        labServerGuid,
                        labServerName,
                        clientGuid,
                        clientName,
                        clientVersion,
                        providerName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndAddExperimentInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddExperimentInfoAsync(string labServerGuid, string labServerName, string clientGuid, string clientName, string clientVersion, string providerName) {
            this.AddExperimentInfoAsync(labServerGuid, labServerName, clientGuid, clientName, clientVersion, providerName, null);
        }
        
        /// <remarks/>
        public void AddExperimentInfoAsync(string labServerGuid, string labServerName, string clientGuid, string clientName, string clientVersion, string providerName, object userState) {
            if ((this.AddExperimentInfoOperationCompleted == null)) {
                this.AddExperimentInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddExperimentInfoOperationCompleted);
            }
            this.InvokeAsync("AddExperimentInfo", new object[] {
                        labServerGuid,
                        labServerName,
                        clientGuid,
                        clientName,
                        clientVersion,
                        providerName}, this.AddExperimentInfoOperationCompleted, userState);
        }
        
        private void OnAddExperimentInfoOperationCompleted(object arg) {
            if ((this.AddExperimentInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddExperimentInfoCompleted(this, new AddExperimentInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
 
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveAvailableTimePeriodsCompletedEventHandler(object sender, RetrieveAvailableTimePeriodsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveAvailableTimePeriodsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveAvailableTimePeriodsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TimePeriod[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TimePeriod[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveAvailableTimeBlocksCompletedEventHandler(object sender, RetrieveAvailableTimeBlocksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveAvailableTimeBlocksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveAvailableTimeBlocksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TimeBlock[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TimeBlock[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ConfirmReservationCompletedEventHandler(object sender, ConfirmReservationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConfirmReservationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConfirmReservationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveReservationCompletedEventHandler(object sender, RemoveReservationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveReservationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveReservationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveTimeSlotsCompletedEventHandler(object sender, RetrieveTimeSlotsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveTimeSlotsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveTimeSlotsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TimePeriod[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TimePeriod[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddUSSInfoCompletedEventHandler(object sender, AddUSSInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddUSSInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddUSSInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddCredentialSetCompletedEventHandler(object sender, AddCredentialSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCredentialSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCredentialSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveCredentialSetCompletedEventHandler(object sender, RemoveCredentialSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveCredentialSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveCredentialSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddExperimentInfoCompletedEventHandler(object sender, AddExperimentInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddExperimentInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddExperimentInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}
