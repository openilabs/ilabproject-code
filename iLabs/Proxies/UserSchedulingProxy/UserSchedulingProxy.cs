//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace iLabs.Services {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;

    using iLabs.DataTypes.ProcessAgentTypes;
    using iLabs.DataTypes.SchedulingTypes;
    using iLabs.DataTypes.SoapHeaderTypes;
    using iLabs.DataTypes.TicketingTypes;
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="IUSS", Namespace="http://ilab.mit.edu/iLabs/Services")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AuthenticationHeader))]
    public partial class UserSchedulingProxy : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        public OperationAuthHeader OperationAuthHeaderValue;
        
        private System.Threading.SendOrPostCallback RevokeReservationOperationCompleted;
        
        private System.Threading.SendOrPostCallback RedeemReservationOperationCompleted;
        
        public AgentAuthHeader AgentAuthHeaderValue;
        
        private System.Threading.SendOrPostCallback AddCredentialSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveCredentialSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddExperimentInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddLSSInfoOperationCompleted;
        
        /// <remarks/>
        public UserSchedulingProxy() {
            this.Url = "http://localhost/ilabwsdl/I_USS.asmx";
        }
        
        /// <remarks/>
        public event RevokeReservationCompletedEventHandler RevokeReservationCompleted;
        
        /// <remarks/>
        public event RedeemReservationCompletedEventHandler RedeemReservationCompleted;
        
        /// <remarks/>
        public event AddCredentialSetCompletedEventHandler AddCredentialSetCompleted;
        
        /// <remarks/>
        public event RemoveCredentialSetCompletedEventHandler RemoveCredentialSetCompleted;
        
        /// <remarks/>
        public event AddExperimentInfoCompletedEventHandler AddExperimentInfoCompleted;
        
        /// <remarks/>
        public event AddLSSInfoCompletedEventHandler AddLSSInfoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RevokeReservation", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RevokeReservation(string labServerGuid, System.DateTime startTime, System.DateTime endTime) {
            object[] results = this.Invoke("RevokeReservation", new object[] {
                        labServerGuid,
                        startTime,
                        endTime});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRevokeReservation(string labServerGuid, System.DateTime startTime, System.DateTime endTime, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RevokeReservation", new object[] {
                        labServerGuid,
                        startTime,
                        endTime}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndRevokeReservation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RevokeReservationAsync(string labServerGuid, System.DateTime startTime, System.DateTime endTime) {
            this.RevokeReservationAsync(labServerGuid, startTime, endTime, null);
        }
        
        /// <remarks/>
        public void RevokeReservationAsync(string labServerGuid, System.DateTime startTime, System.DateTime endTime, object userState) {
            if ((this.RevokeReservationOperationCompleted == null)) {
                this.RevokeReservationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRevokeReservationOperationCompleted);
            }
            this.InvokeAsync("RevokeReservation", new object[] {
                        labServerGuid,
                        startTime,
                        endTime}, this.RevokeReservationOperationCompleted, userState);
        }
        
        private void OnRevokeReservationOperationCompleted(object arg) {
            if ((this.RevokeReservationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RevokeReservationCompleted(this, new RevokeReservationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("OperationAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RedeemReservation", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(Namespace="http://ilab.mit.edu/iLabs/type")]
        public Reservation RedeemReservation(string userName, string serviceBrokerGuid, string clientGuid, string labServerGuid) {
            object[] results = this.Invoke("RedeemReservation", new object[] {
                        userName,
                        serviceBrokerGuid,
                        clientGuid,
                        labServerGuid});
            return ((Reservation)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRedeemReservation(string userName, string serviceBrokerGuid, string clientGuid, string labServerGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RedeemReservation", new object[] {
                        userName,
                        serviceBrokerGuid,
                        clientGuid,
                        labServerGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public Reservation EndRedeemReservation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Reservation)(results[0]));
        }
        
        /// <remarks/>
        public void RedeemReservationAsync(string userName, string serviceBrokerGuid, string clientGuid, string labServerGuid) {
            this.RedeemReservationAsync(userName, serviceBrokerGuid, clientGuid, labServerGuid, null);
        }
        
        /// <remarks/>
        public void RedeemReservationAsync(string userName, string serviceBrokerGuid, string clientGuid, string labServerGuid, object userState) {
            if ((this.RedeemReservationOperationCompleted == null)) {
                this.RedeemReservationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRedeemReservationOperationCompleted);
            }
            this.InvokeAsync("RedeemReservation", new object[] {
                        userName,
                        serviceBrokerGuid,
                        clientGuid,
                        labServerGuid}, this.RedeemReservationOperationCompleted, userState);
        }
        
        private void OnRedeemReservationOperationCompleted(object arg) {
            if ((this.RedeemReservationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RedeemReservationCompleted(this, new RedeemReservationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/AddCredentialSet", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddCredentialSet(string serviceBrokerGuid, string serviceBrokerName, string groupName) {
            object[] results = this.Invoke("AddCredentialSet", new object[] {
                        serviceBrokerGuid,
                        serviceBrokerName,
                        groupName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddCredentialSet(string serviceBrokerGuid, string serviceBrokerName, string groupName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddCredentialSet", new object[] {
                        serviceBrokerGuid,
                        serviceBrokerName,
                        groupName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndAddCredentialSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddCredentialSetAsync(string serviceBrokerGuid, string serviceBrokerName, string groupName) {
            this.AddCredentialSetAsync(serviceBrokerGuid, serviceBrokerName, groupName, null);
        }
        
        /// <remarks/>
        public void AddCredentialSetAsync(string serviceBrokerGuid, string serviceBrokerName, string groupName, object userState) {
            if ((this.AddCredentialSetOperationCompleted == null)) {
                this.AddCredentialSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCredentialSetOperationCompleted);
            }
            this.InvokeAsync("AddCredentialSet", new object[] {
                        serviceBrokerGuid,
                        serviceBrokerName,
                        groupName}, this.AddCredentialSetOperationCompleted, userState);
        }
        
        private void OnAddCredentialSetOperationCompleted(object arg) {
            if ((this.AddCredentialSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCredentialSetCompleted(this, new AddCredentialSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/RemoveCredentialSet", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveCredentialSet(string serviceBrokerGuid, string serviceBrokerName, string groupName) {
            object[] results = this.Invoke("RemoveCredentialSet", new object[] {
                        serviceBrokerGuid,
                        serviceBrokerName,
                        groupName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveCredentialSet(string serviceBrokerGuid, string serviceBrokerName, string groupName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveCredentialSet", new object[] {
                        serviceBrokerGuid,
                        serviceBrokerName,
                        groupName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndRemoveCredentialSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveCredentialSetAsync(string serviceBrokerGuid, string serviceBrokerName, string groupName) {
            this.RemoveCredentialSetAsync(serviceBrokerGuid, serviceBrokerName, groupName, null);
        }
        
        /// <remarks/>
        public void RemoveCredentialSetAsync(string serviceBrokerGuid, string serviceBrokerName, string groupName, object userState) {
            if ((this.RemoveCredentialSetOperationCompleted == null)) {
                this.RemoveCredentialSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveCredentialSetOperationCompleted);
            }
            this.InvokeAsync("RemoveCredentialSet", new object[] {
                        serviceBrokerGuid,
                        serviceBrokerName,
                        groupName}, this.RemoveCredentialSetOperationCompleted, userState);
        }
        
        private void OnRemoveCredentialSetOperationCompleted(object arg) {
            if ((this.RemoveCredentialSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveCredentialSetCompleted(this, new RemoveCredentialSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/AddExperimentInfo", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddExperimentInfo(string labServerGuid, string labServerName, string labClientGuid, string labClientName, string labClientVersion, string providerName, string lssGuid) {
            object[] results = this.Invoke("AddExperimentInfo", new object[] {
                        labServerGuid,
                        labServerName,
                        labClientGuid,
                        labClientName,
                        labClientVersion,
                        providerName,
                        lssGuid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddExperimentInfo(string labServerGuid, string labServerName, string labClientGuid, string labClientName, string labClientVersion, string providerName, string lssGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddExperimentInfo", new object[] {
                        labServerGuid,
                        labServerName,
                        labClientGuid,
                        labClientName,
                        labClientVersion,
                        providerName,
                        lssGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndAddExperimentInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddExperimentInfoAsync(string labServerGuid, string labServerName, string labClientGuid, string labClientName, string labClientVersion, string providerName, string lssGuid) {
            this.AddExperimentInfoAsync(labServerGuid, labServerName, labClientGuid, labClientName, labClientVersion, providerName, lssGuid, null);
        }
        
        /// <remarks/>
        public void AddExperimentInfoAsync(string labServerGuid, string labServerName, string labClientGuid, string labClientName, string labClientVersion, string providerName, string lssGuid, object userState) {
            if ((this.AddExperimentInfoOperationCompleted == null)) {
                this.AddExperimentInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddExperimentInfoOperationCompleted);
            }
            this.InvokeAsync("AddExperimentInfo", new object[] {
                        labServerGuid,
                        labServerName,
                        labClientGuid,
                        labClientName,
                        labClientVersion,
                        providerName,
                        lssGuid}, this.AddExperimentInfoOperationCompleted, userState);
        }
        
        private void OnAddExperimentInfoOperationCompleted(object arg) {
            if ((this.AddExperimentInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddExperimentInfoCompleted(this, new AddExperimentInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/iLabs/Services/AddLSSInfo", RequestNamespace="http://ilab.mit.edu/iLabs/Services", ResponseNamespace="http://ilab.mit.edu/iLabs/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddLSSInfo(string lssGuid, string lssName, string lssUrl) {
            object[] results = this.Invoke("AddLSSInfo", new object[] {
                        lssGuid,
                        lssName,
                        lssUrl});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddLSSInfo(string lssGuid, string lssName, string lssUrl, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddLSSInfo", new object[] {
                        lssGuid,
                        lssName,
                        lssUrl}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndAddLSSInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddLSSInfoAsync(string lssGuid, string lssName, string lssUrl) {
            this.AddLSSInfoAsync(lssGuid, lssName, lssUrl, null);
        }
        
        /// <remarks/>
        public void AddLSSInfoAsync(string lssGuid, string lssName, string lssUrl, object userState) {
            if ((this.AddLSSInfoOperationCompleted == null)) {
                this.AddLSSInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddLSSInfoOperationCompleted);
            }
            this.InvokeAsync("AddLSSInfo", new object[] {
                        lssGuid,
                        lssName,
                        lssUrl}, this.AddLSSInfoOperationCompleted, userState);
        }
        
        private void OnAddLSSInfoOperationCompleted(object arg) {
            if ((this.AddLSSInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddLSSInfoCompleted(this, new AddLSSInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    

    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RevokeReservationCompletedEventHandler(object sender, RevokeReservationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RevokeReservationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RevokeReservationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RedeemReservationCompletedEventHandler(object sender, RedeemReservationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RedeemReservationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RedeemReservationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Reservation Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Reservation)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddCredentialSetCompletedEventHandler(object sender, AddCredentialSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCredentialSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCredentialSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveCredentialSetCompletedEventHandler(object sender, RemoveCredentialSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveCredentialSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveCredentialSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddExperimentInfoCompletedEventHandler(object sender, AddExperimentInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddExperimentInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddExperimentInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddLSSInfoCompletedEventHandler(object sender, AddLSSInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddLSSInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddLSSInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}
