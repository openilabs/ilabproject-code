using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using iLabs.ServiceBroker.Authorization;
using iLabs.ServiceBroker;
using iLabs.ServiceBroker.Administration;
using iLabs.DataTypes;
using iLabs.DataTypes.SoapHeaderTypes;
using iLabs.DataTypes.ProcessAgentTypes;
using iLabs.Core;
using iLabs.Proxies.ISB;
using iLabs.Proxies.LSS;
using iLabs.Proxies.USS;

/* this class is temporary stores user elements as they manuver through the system
 * 
 
*/
public class userDictionary
{
    protected LabClient lc;

    AuthorizationWrapperClass wrapper = new AuthorizationWrapperClass();

    BrokerDB issuer = new BrokerDB();

   private Dictionary<string, string> userCredentials = new Dictionary<string, string>();
    
    



    public userDictionary()
    {
        //Dictionary<string, string> userCredentials = new Dictionary<string, string>();
        userCredentials.Add("keyword", null);
        userCredentials.Add("username", null);
        userCredentials.Add("userId", null);
        userCredentials.Add("userTZ", null);
        
        userCredentials.Add("effectiveGroupName", null);
        userCredentials.Add("RequstStartTime", null);
        userCredentials.Add("RequestEndTime", null);

        userCredentials.Add("ClientGuid", null);
        userCredentials.Add("labServerGuid", null);
        userCredentials.Add("labClientName", null);
        userCredentials.Add("labClientVersion", null);


        userCredentials.Add("ussGuid", null);
        userCredentials.Add("lssGuid", null);

        userCredentials.Add("couponId", null);
        userCredentials.Add("passkey", null);
        userCredentials.Add("issuerGuid", null);

    }

    public void userInterface(string textMessage)
    {
        //------------------------message format:--------------------------------------
        // 1.keyword
        // 2.username
        // 3.labName
        // 4.requested time and date
        // the end time is generated by the requested time
        // Note: message format is liable to change

        //puts the details of the user appropriately into the userDictionary dictionary
        //and then uses them to callup the scheduling methods
        

        //split the incoming message first into an array
        string[] splitMessage = textMessage.Split(' ');

        //input elements into the array from the message sent
        userCredentials["keyword"] = splitMessage[0];
        userCredentials["username"] = splitMessage[1];
        userCredentials["labName"] = splitMessage[2];
        userCredentials["RequestStartTime"] = splitMessage[3];

        return;
    }

    public void isaInterface()
    {
        //this collects all the other neccessary elements  that are required for carrying out scheduling
        //this is based on the user input paramaters

        //retrieving userID
        userCredentials["userID"] = userGroup.userAuthenticatation(userCredentials["username"]).ToString();

        //retrieve the effectiveGroup
        userCredentials["effectiveGroupName"] = userGroup.getUserGroups(userCredentials["username"]);

        //Client is the experiment to be done
        //if the user inputs the experiment name..then perhaps that could be used to get the id and other details
        //this case considers the scenario of when the user is in position of doing only one experiment..
        //ofcourse this can easily change and will later put into consideration
        string clientID = "1";  //this was manually got and thus needs to be later replaced
        lc = wrapper.GetLabClientsWrapper(new int[] { Convert.ToInt32(clientID) })[0];

        //retrieving the groupName
        userCredentials["effectiveGroupName"] = "Experiment_Group";    //Temporary: need to find how to get the user groups without asking him

        ProcessAgent labServer = issuer.GetProcessAgent(lc.labServerIDs[0]);
        int ussId = issuer.FindProcessAgentIdForClient(lc.clientID, ProcessAgentType.SCHEDULING_SERVER);
        //finding the ClientGuid and labServerGuid
        userCredentials["ClientGuid"] = lc.clientGuid;
        userCredentials["labServerGuid"] = labServer.agentGuid;
        userCredentials["labClientName"] = lc.ClientName; //this is actually what the user is to provide..so its temporary for now
        userCredentials["labClientVersion"] = lc.version;
        //labServer = labServer.agentGuid;


        userCredentials["ussGuid"] = issuer.GetProcessAgent(ussId).agentGuid;
        int lssId = issuer.FindProcessAgentIdForAgent(lc.labServerIDs[0], ProcessAgentType.LAB_SCHEDULING_SERVER);

         userCredentials["lssGuid"] = issuer.GetProcessAgent(lssId).agentGuid;

         long duration = 36000; //this was already hard coded int the available system


         userCredentials["userTZ"] = "180";  //userTZ is liable to change..so this is only temporary
         int userTZ = Convert.ToInt32(userCredentials["userTZ"]);

        //with the scheduleUrl, we can retrieve the couponId, issuerGuid and passKey
         RecipeExecutor recipeExec = RecipeExecutor.Instance();
         string schedulingUrl = recipeExec.ExecuteExerimentSchedulingRecipe( userCredentials["ussGuid"],
            userCredentials["lssGuid"], userCredentials["username"], userCredentials["effectiveGroupName"],
             userCredentials["labServerGuid"], userCredentials["ClientGuid"], userCredentials["labClientName"],
             userCredentials["labClientVersion"], duration, userTZ);

        //spliting the schedulingUrl and picking out the 3 elements that make a coupon
         string[] scheduleUrlElements = schedulingUrl.Split('?', '&', '=');
         userCredentials["couponId"] = scheduleUrlElements[2];
         userCredentials["issuerGuid"] = scheduleUrlElements[4];
         userCredentials["passkey"] = scheduleUrlElements[6];
    }

    //for testing purposes only do not delete
    public string replyMessage()
    {
        return userCredentials["passkey"];
    }

    protected int MakeReservation(string userName,string groupName,string labServerGuid,
        string clientGuid,DateTime start,DateTime end){
        int status = -1;
        InteractiveSBProxy isbProxy = new InteractiveSBProxy();
        UserSchedulingProxy ussProxy = new UserSchedulingProxy();             
        isbProxy.AgentAuthHeaderValue = new AgentAuthHeader();
        return status;
    }
}