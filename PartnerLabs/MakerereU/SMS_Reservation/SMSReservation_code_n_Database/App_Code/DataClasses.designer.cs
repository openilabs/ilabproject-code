#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="iLab_SMS")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertErrorDescription(ErrorDescription instance);
  partial void UpdateErrorDescription(ErrorDescription instance);
  partial void DeleteErrorDescription(ErrorDescription instance);
  partial void InsertLabConfiguration(LabConfiguration instance);
  partial void UpdateLabConfiguration(LabConfiguration instance);
  partial void DeleteLabConfiguration(LabConfiguration instance);
  partial void InsertInComingMessage(InComingMessage instance);
  partial void UpdateInComingMessage(InComingMessage instance);
  partial void DeleteInComingMessage(InComingMessage instance);
  partial void InsertOutGoingMessage(OutGoingMessage instance);
  partial void UpdateOutGoingMessage(OutGoingMessage instance);
  partial void DeleteOutGoingMessage(OutGoingMessage instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["iLab_SMSConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<ErrorDescription> ErrorDescriptions
	{
		get
		{
			return this.GetTable<ErrorDescription>();
		}
	}
	
	public System.Data.Linq.Table<LabConfiguration> LabConfigurations
	{
		get
		{
			return this.GetTable<LabConfiguration>();
		}
	}
	
	public System.Data.Linq.Table<InComingMessage> InComingMessages
	{
		get
		{
			return this.GetTable<InComingMessage>();
		}
	}
	
	public System.Data.Linq.Table<OutGoingMessage> OutGoingMessages
	{
		get
		{
			return this.GetTable<OutGoingMessage>();
		}
	}
}

[Table(Name="dbo.ErrorDescriptions")]
public partial class ErrorDescription : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ErrorID;
	
	private string _nameError;
	
	private string _codeError;
	
	private string _ShortDescription;
	
	private string _LongDescription;
	
	private string _PossibleSoln;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnErrorIDChanging(int value);
    partial void OnErrorIDChanged();
    partial void OnnameErrorChanging(string value);
    partial void OnnameErrorChanged();
    partial void OncodeErrorChanging(string value);
    partial void OncodeErrorChanged();
    partial void OnShortDescriptionChanging(string value);
    partial void OnShortDescriptionChanged();
    partial void OnLongDescriptionChanging(string value);
    partial void OnLongDescriptionChanged();
    partial void OnPossibleSolnChanging(string value);
    partial void OnPossibleSolnChanged();
    #endregion
	
	public ErrorDescription()
	{
		OnCreated();
	}
	
	[Column(Storage="_ErrorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ErrorID
	{
		get
		{
			return this._ErrorID;
		}
		set
		{
			if ((this._ErrorID != value))
			{
				this.OnErrorIDChanging(value);
				this.SendPropertyChanging();
				this._ErrorID = value;
				this.SendPropertyChanged("ErrorID");
				this.OnErrorIDChanged();
			}
		}
	}
	
	[Column(Storage="_nameError", DbType="NChar(30)")]
	public string nameError
	{
		get
		{
			return this._nameError;
		}
		set
		{
			if ((this._nameError != value))
			{
				this.OnnameErrorChanging(value);
				this.SendPropertyChanging();
				this._nameError = value;
				this.SendPropertyChanged("nameError");
				this.OnnameErrorChanged();
			}
		}
	}
	
	[Column(Storage="_codeError", DbType="NChar(10)")]
	public string codeError
	{
		get
		{
			return this._codeError;
		}
		set
		{
			if ((this._codeError != value))
			{
				this.OncodeErrorChanging(value);
				this.SendPropertyChanging();
				this._codeError = value;
				this.SendPropertyChanged("codeError");
				this.OncodeErrorChanged();
			}
		}
	}
	
	[Column(Storage="_ShortDescription", DbType="NChar(60)")]
	public string ShortDescription
	{
		get
		{
			return this._ShortDescription;
		}
		set
		{
			if ((this._ShortDescription != value))
			{
				this.OnShortDescriptionChanging(value);
				this.SendPropertyChanging();
				this._ShortDescription = value;
				this.SendPropertyChanged("ShortDescription");
				this.OnShortDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_LongDescription", DbType="NChar(500)")]
	public string LongDescription
	{
		get
		{
			return this._LongDescription;
		}
		set
		{
			if ((this._LongDescription != value))
			{
				this.OnLongDescriptionChanging(value);
				this.SendPropertyChanging();
				this._LongDescription = value;
				this.SendPropertyChanged("LongDescription");
				this.OnLongDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_PossibleSoln", DbType="NChar(80)")]
	public string PossibleSoln
	{
		get
		{
			return this._PossibleSoln;
		}
		set
		{
			if ((this._PossibleSoln != value))
			{
				this.OnPossibleSolnChanging(value);
				this.SendPropertyChanging();
				this._PossibleSoln = value;
				this.SendPropertyChanged("PossibleSoln");
				this.OnPossibleSolnChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.LabConfiguration")]
public partial class LabConfiguration : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _LabConfigurationID;
	
	private string _applicationCallName;
	
	private string _LabName;
	
	private string _LabDescription;
	
	private string _ExperimentGroupName;
	
	private string _ServiceBrokerGUID;
	
	private string _ServiceBrokerURL;
	
	private string _ClientName;
	
	private string _ClientGuid;
	
	private string _LabServerName;
	
	private string _LabServerGuid;
	
	private System.Nullable<int> _MaximumLabDuration;
	
	private System.Nullable<System.DateTime> _DateCreated;
	
	private EntitySet<InComingMessage> _InComingMessages;
	
	private EntitySet<OutGoingMessage> _OutGoingMessages;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLabConfigurationIDChanging(int value);
    partial void OnLabConfigurationIDChanged();
    partial void OnapplicationCallNameChanging(string value);
    partial void OnapplicationCallNameChanged();
    partial void OnLabNameChanging(string value);
    partial void OnLabNameChanged();
    partial void OnLabDescriptionChanging(string value);
    partial void OnLabDescriptionChanged();
    partial void OnExperimentGroupNameChanging(string value);
    partial void OnExperimentGroupNameChanged();
    partial void OnServiceBrokerGUIDChanging(string value);
    partial void OnServiceBrokerGUIDChanged();
    partial void OnServiceBrokerURLChanging(string value);
    partial void OnServiceBrokerURLChanged();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnClientGuidChanging(string value);
    partial void OnClientGuidChanged();
    partial void OnLabServerNameChanging(string value);
    partial void OnLabServerNameChanged();
    partial void OnLabServerGuidChanging(string value);
    partial void OnLabServerGuidChanged();
    partial void OnMaximumLabDurationChanging(System.Nullable<int> value);
    partial void OnMaximumLabDurationChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    #endregion
	
	public LabConfiguration()
	{
		this._InComingMessages = new EntitySet<InComingMessage>(new Action<InComingMessage>(this.attach_InComingMessages), new Action<InComingMessage>(this.detach_InComingMessages));
		this._OutGoingMessages = new EntitySet<OutGoingMessage>(new Action<OutGoingMessage>(this.attach_OutGoingMessages), new Action<OutGoingMessage>(this.detach_OutGoingMessages));
		OnCreated();
	}
	
	[Column(Storage="_LabConfigurationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int LabConfigurationID
	{
		get
		{
			return this._LabConfigurationID;
		}
		set
		{
			if ((this._LabConfigurationID != value))
			{
				this.OnLabConfigurationIDChanging(value);
				this.SendPropertyChanging();
				this._LabConfigurationID = value;
				this.SendPropertyChanged("LabConfigurationID");
				this.OnLabConfigurationIDChanged();
			}
		}
	}
	
	[Column(Storage="_applicationCallName", DbType="NChar(10)")]
	public string applicationCallName
	{
		get
		{
			return this._applicationCallName;
		}
		set
		{
			if ((this._applicationCallName != value))
			{
				this.OnapplicationCallNameChanging(value);
				this.SendPropertyChanging();
				this._applicationCallName = value;
				this.SendPropertyChanged("applicationCallName");
				this.OnapplicationCallNameChanged();
			}
		}
	}
	
	[Column(Storage="_LabName", DbType="NChar(70)")]
	public string LabName
	{
		get
		{
			return this._LabName;
		}
		set
		{
			if ((this._LabName != value))
			{
				this.OnLabNameChanging(value);
				this.SendPropertyChanging();
				this._LabName = value;
				this.SendPropertyChanged("LabName");
				this.OnLabNameChanged();
			}
		}
	}
	
	[Column(Storage="_LabDescription", DbType="NChar(500)")]
	public string LabDescription
	{
		get
		{
			return this._LabDescription;
		}
		set
		{
			if ((this._LabDescription != value))
			{
				this.OnLabDescriptionChanging(value);
				this.SendPropertyChanging();
				this._LabDescription = value;
				this.SendPropertyChanged("LabDescription");
				this.OnLabDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_ExperimentGroupName", DbType="NChar(70)")]
	public string ExperimentGroupName
	{
		get
		{
			return this._ExperimentGroupName;
		}
		set
		{
			if ((this._ExperimentGroupName != value))
			{
				this.OnExperimentGroupNameChanging(value);
				this.SendPropertyChanging();
				this._ExperimentGroupName = value;
				this.SendPropertyChanged("ExperimentGroupName");
				this.OnExperimentGroupNameChanged();
			}
		}
	}
	
	[Column(Storage="_ServiceBrokerGUID", DbType="NChar(70)")]
	public string ServiceBrokerGUID
	{
		get
		{
			return this._ServiceBrokerGUID;
		}
		set
		{
			if ((this._ServiceBrokerGUID != value))
			{
				this.OnServiceBrokerGUIDChanging(value);
				this.SendPropertyChanging();
				this._ServiceBrokerGUID = value;
				this.SendPropertyChanged("ServiceBrokerGUID");
				this.OnServiceBrokerGUIDChanged();
			}
		}
	}
	
	[Column(Storage="_ServiceBrokerURL", DbType="NChar(70)")]
	public string ServiceBrokerURL
	{
		get
		{
			return this._ServiceBrokerURL;
		}
		set
		{
			if ((this._ServiceBrokerURL != value))
			{
				this.OnServiceBrokerURLChanging(value);
				this.SendPropertyChanging();
				this._ServiceBrokerURL = value;
				this.SendPropertyChanged("ServiceBrokerURL");
				this.OnServiceBrokerURLChanged();
			}
		}
	}
	
	[Column(Storage="_ClientName", DbType="NChar(70)")]
	public string ClientName
	{
		get
		{
			return this._ClientName;
		}
		set
		{
			if ((this._ClientName != value))
			{
				this.OnClientNameChanging(value);
				this.SendPropertyChanging();
				this._ClientName = value;
				this.SendPropertyChanged("ClientName");
				this.OnClientNameChanged();
			}
		}
	}
	
	[Column(Storage="_ClientGuid", DbType="NChar(70)")]
	public string ClientGuid
	{
		get
		{
			return this._ClientGuid;
		}
		set
		{
			if ((this._ClientGuid != value))
			{
				this.OnClientGuidChanging(value);
				this.SendPropertyChanging();
				this._ClientGuid = value;
				this.SendPropertyChanged("ClientGuid");
				this.OnClientGuidChanged();
			}
		}
	}
	
	[Column(Storage="_LabServerName", DbType="NChar(70)")]
	public string LabServerName
	{
		get
		{
			return this._LabServerName;
		}
		set
		{
			if ((this._LabServerName != value))
			{
				this.OnLabServerNameChanging(value);
				this.SendPropertyChanging();
				this._LabServerName = value;
				this.SendPropertyChanged("LabServerName");
				this.OnLabServerNameChanged();
			}
		}
	}
	
	[Column(Storage="_LabServerGuid", DbType="NChar(70)")]
	public string LabServerGuid
	{
		get
		{
			return this._LabServerGuid;
		}
		set
		{
			if ((this._LabServerGuid != value))
			{
				this.OnLabServerGuidChanging(value);
				this.SendPropertyChanging();
				this._LabServerGuid = value;
				this.SendPropertyChanged("LabServerGuid");
				this.OnLabServerGuidChanged();
			}
		}
	}
	
	[Column(Storage="_MaximumLabDuration", DbType="Int")]
	public System.Nullable<int> MaximumLabDuration
	{
		get
		{
			return this._MaximumLabDuration;
		}
		set
		{
			if ((this._MaximumLabDuration != value))
			{
				this.OnMaximumLabDurationChanging(value);
				this.SendPropertyChanging();
				this._MaximumLabDuration = value;
				this.SendPropertyChanged("MaximumLabDuration");
				this.OnMaximumLabDurationChanged();
			}
		}
	}
	
	[Column(Storage="_DateCreated", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateCreated
	{
		get
		{
			return this._DateCreated;
		}
		set
		{
			if ((this._DateCreated != value))
			{
				this.OnDateCreatedChanging(value);
				this.SendPropertyChanging();
				this._DateCreated = value;
				this.SendPropertyChanged("DateCreated");
				this.OnDateCreatedChanged();
			}
		}
	}
	
	[Association(Name="LabConfiguration_InComingMessage", Storage="_InComingMessages", OtherKey="LabConfigurationID")]
	public EntitySet<InComingMessage> InComingMessages
	{
		get
		{
			return this._InComingMessages;
		}
		set
		{
			this._InComingMessages.Assign(value);
		}
	}
	
	[Association(Name="LabConfiguration_OutGoingMessage", Storage="_OutGoingMessages", OtherKey="LabConfigurationID")]
	public EntitySet<OutGoingMessage> OutGoingMessages
	{
		get
		{
			return this._OutGoingMessages;
		}
		set
		{
			this._OutGoingMessages.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_InComingMessages(InComingMessage entity)
	{
		this.SendPropertyChanging();
		entity.LabConfiguration = this;
	}
	
	private void detach_InComingMessages(InComingMessage entity)
	{
		this.SendPropertyChanging();
		entity.LabConfiguration = null;
	}
	
	private void attach_OutGoingMessages(OutGoingMessage entity)
	{
		this.SendPropertyChanging();
		entity.LabConfiguration = this;
	}
	
	private void detach_OutGoingMessages(OutGoingMessage entity)
	{
		this.SendPropertyChanging();
		entity.LabConfiguration = null;
	}
}

[Table(Name="dbo.InComingMessages")]
public partial class InComingMessage : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IncomingMessageID;
	
	private string _Telephone;
	
	private string _username;
	
	private System.Nullable<int> _LabConfigurationID;
	
	private System.Nullable<System.DateTime> _StartTimeRange;
	
	private System.Nullable<System.DateTime> _EndTimeRange;
	
	private System.Nullable<System.DateTime> _TimeReceived;
	
	private string _MessageKey;
	
	private string _RwRecievedMsg;
	
	private EntityRef<LabConfiguration> _LabConfiguration;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIncomingMessageIDChanging(int value);
    partial void OnIncomingMessageIDChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnLabConfigurationIDChanging(System.Nullable<int> value);
    partial void OnLabConfigurationIDChanged();
    partial void OnStartTimeRangeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartTimeRangeChanged();
    partial void OnEndTimeRangeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeRangeChanged();
    partial void OnTimeReceivedChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeReceivedChanged();
    partial void OnMessageKeyChanging(string value);
    partial void OnMessageKeyChanged();
    partial void OnRwRecievedMsgChanging(string value);
    partial void OnRwRecievedMsgChanged();
    #endregion
	
	public InComingMessage()
	{
		this._LabConfiguration = default(EntityRef<LabConfiguration>);
		OnCreated();
	}
	
	[Column(Storage="_IncomingMessageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IncomingMessageID
	{
		get
		{
			return this._IncomingMessageID;
		}
		set
		{
			if ((this._IncomingMessageID != value))
			{
				this.OnIncomingMessageIDChanging(value);
				this.SendPropertyChanging();
				this._IncomingMessageID = value;
				this.SendPropertyChanged("IncomingMessageID");
				this.OnIncomingMessageIDChanged();
			}
		}
	}
	
	[Column(Storage="_Telephone", DbType="NChar(80)")]
	public string Telephone
	{
		get
		{
			return this._Telephone;
		}
		set
		{
			if ((this._Telephone != value))
			{
				this.OnTelephoneChanging(value);
				this.SendPropertyChanging();
				this._Telephone = value;
				this.SendPropertyChanged("Telephone");
				this.OnTelephoneChanged();
			}
		}
	}
	
	[Column(Storage="_username", DbType="NChar(80)")]
	public string username
	{
		get
		{
			return this._username;
		}
		set
		{
			if ((this._username != value))
			{
				this.OnusernameChanging(value);
				this.SendPropertyChanging();
				this._username = value;
				this.SendPropertyChanged("username");
				this.OnusernameChanged();
			}
		}
	}
	
	[Column(Storage="_LabConfigurationID", DbType="Int")]
	public System.Nullable<int> LabConfigurationID
	{
		get
		{
			return this._LabConfigurationID;
		}
		set
		{
			if ((this._LabConfigurationID != value))
			{
				if (this._LabConfiguration.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnLabConfigurationIDChanging(value);
				this.SendPropertyChanging();
				this._LabConfigurationID = value;
				this.SendPropertyChanged("LabConfigurationID");
				this.OnLabConfigurationIDChanged();
			}
		}
	}
	
	[Column(Storage="_StartTimeRange", DbType="DateTime")]
	public System.Nullable<System.DateTime> StartTimeRange
	{
		get
		{
			return this._StartTimeRange;
		}
		set
		{
			if ((this._StartTimeRange != value))
			{
				this.OnStartTimeRangeChanging(value);
				this.SendPropertyChanging();
				this._StartTimeRange = value;
				this.SendPropertyChanged("StartTimeRange");
				this.OnStartTimeRangeChanged();
			}
		}
	}
	
	[Column(Storage="_EndTimeRange", DbType="DateTime")]
	public System.Nullable<System.DateTime> EndTimeRange
	{
		get
		{
			return this._EndTimeRange;
		}
		set
		{
			if ((this._EndTimeRange != value))
			{
				this.OnEndTimeRangeChanging(value);
				this.SendPropertyChanging();
				this._EndTimeRange = value;
				this.SendPropertyChanged("EndTimeRange");
				this.OnEndTimeRangeChanged();
			}
		}
	}
	
	[Column(Storage="_TimeReceived", DbType="DateTime")]
	public System.Nullable<System.DateTime> TimeReceived
	{
		get
		{
			return this._TimeReceived;
		}
		set
		{
			if ((this._TimeReceived != value))
			{
				this.OnTimeReceivedChanging(value);
				this.SendPropertyChanging();
				this._TimeReceived = value;
				this.SendPropertyChanged("TimeReceived");
				this.OnTimeReceivedChanged();
			}
		}
	}
	
	[Column(Storage="_MessageKey", DbType="NChar(20)")]
	public string MessageKey
	{
		get
		{
			return this._MessageKey;
		}
		set
		{
			if ((this._MessageKey != value))
			{
				this.OnMessageKeyChanging(value);
				this.SendPropertyChanging();
				this._MessageKey = value;
				this.SendPropertyChanged("MessageKey");
				this.OnMessageKeyChanged();
			}
		}
	}
	
	[Column(Storage="_RwRecievedMsg", DbType="NChar(200)")]
	public string RwRecievedMsg
	{
		get
		{
			return this._RwRecievedMsg;
		}
		set
		{
			if ((this._RwRecievedMsg != value))
			{
				this.OnRwRecievedMsgChanging(value);
				this.SendPropertyChanging();
				this._RwRecievedMsg = value;
				this.SendPropertyChanged("RwRecievedMsg");
				this.OnRwRecievedMsgChanged();
			}
		}
	}
	
	[Association(Name="LabConfiguration_InComingMessage", Storage="_LabConfiguration", ThisKey="LabConfigurationID", IsForeignKey=true)]
	public LabConfiguration LabConfiguration
	{
		get
		{
			return this._LabConfiguration.Entity;
		}
		set
		{
			LabConfiguration previousValue = this._LabConfiguration.Entity;
			if (((previousValue != value) 
						|| (this._LabConfiguration.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._LabConfiguration.Entity = null;
					previousValue.InComingMessages.Remove(this);
				}
				this._LabConfiguration.Entity = value;
				if ((value != null))
				{
					value.InComingMessages.Add(this);
					this._LabConfigurationID = value.LabConfigurationID;
				}
				else
				{
					this._LabConfigurationID = default(Nullable<int>);
				}
				this.SendPropertyChanged("LabConfiguration");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.OutGoingMessages")]
public partial class OutGoingMessage : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _OutGoingMessageID;
	
	private System.Nullable<int> _LabConfigurationID;
	
	private System.Nullable<bool> _IsScheduled;
	
	private System.Nullable<System.DateTime> _GivenStartTime;
	
	private System.Nullable<System.DateTime> _GivenEndTime;
	
	private string _RwSentMsg;
	
	private string _MessageKey;
	
	private System.Nullable<System.DateTime> _TimeAndDateSent;
	
	private string _codeError;
	
	private EntityRef<LabConfiguration> _LabConfiguration;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOutGoingMessageIDChanging(int value);
    partial void OnOutGoingMessageIDChanged();
    partial void OnLabConfigurationIDChanging(System.Nullable<int> value);
    partial void OnLabConfigurationIDChanged();
    partial void OnIsScheduledChanging(System.Nullable<bool> value);
    partial void OnIsScheduledChanged();
    partial void OnGivenStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnGivenStartTimeChanged();
    partial void OnGivenEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnGivenEndTimeChanged();
    partial void OnRwSentMsgChanging(string value);
    partial void OnRwSentMsgChanged();
    partial void OnMessageKeyChanging(string value);
    partial void OnMessageKeyChanged();
    partial void OnTimeAndDateSentChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeAndDateSentChanged();
    partial void OncodeErrorChanging(string value);
    partial void OncodeErrorChanged();
    #endregion
	
	public OutGoingMessage()
	{
		this._LabConfiguration = default(EntityRef<LabConfiguration>);
		OnCreated();
	}
	
	[Column(Storage="_OutGoingMessageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int OutGoingMessageID
	{
		get
		{
			return this._OutGoingMessageID;
		}
		set
		{
			if ((this._OutGoingMessageID != value))
			{
				this.OnOutGoingMessageIDChanging(value);
				this.SendPropertyChanging();
				this._OutGoingMessageID = value;
				this.SendPropertyChanged("OutGoingMessageID");
				this.OnOutGoingMessageIDChanged();
			}
		}
	}
	
	[Column(Storage="_LabConfigurationID", DbType="Int")]
	public System.Nullable<int> LabConfigurationID
	{
		get
		{
			return this._LabConfigurationID;
		}
		set
		{
			if ((this._LabConfigurationID != value))
			{
				if (this._LabConfiguration.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnLabConfigurationIDChanging(value);
				this.SendPropertyChanging();
				this._LabConfigurationID = value;
				this.SendPropertyChanged("LabConfigurationID");
				this.OnLabConfigurationIDChanged();
			}
		}
	}
	
	[Column(Storage="_IsScheduled", DbType="Bit")]
	public System.Nullable<bool> IsScheduled
	{
		get
		{
			return this._IsScheduled;
		}
		set
		{
			if ((this._IsScheduled != value))
			{
				this.OnIsScheduledChanging(value);
				this.SendPropertyChanging();
				this._IsScheduled = value;
				this.SendPropertyChanged("IsScheduled");
				this.OnIsScheduledChanged();
			}
		}
	}
	
	[Column(Storage="_GivenStartTime", DbType="DateTime")]
	public System.Nullable<System.DateTime> GivenStartTime
	{
		get
		{
			return this._GivenStartTime;
		}
		set
		{
			if ((this._GivenStartTime != value))
			{
				this.OnGivenStartTimeChanging(value);
				this.SendPropertyChanging();
				this._GivenStartTime = value;
				this.SendPropertyChanged("GivenStartTime");
				this.OnGivenStartTimeChanged();
			}
		}
	}
	
	[Column(Storage="_GivenEndTime", DbType="DateTime")]
	public System.Nullable<System.DateTime> GivenEndTime
	{
		get
		{
			return this._GivenEndTime;
		}
		set
		{
			if ((this._GivenEndTime != value))
			{
				this.OnGivenEndTimeChanging(value);
				this.SendPropertyChanging();
				this._GivenEndTime = value;
				this.SendPropertyChanged("GivenEndTime");
				this.OnGivenEndTimeChanged();
			}
		}
	}
	
	[Column(Storage="_RwSentMsg", DbType="NChar(200)")]
	public string RwSentMsg
	{
		get
		{
			return this._RwSentMsg;
		}
		set
		{
			if ((this._RwSentMsg != value))
			{
				this.OnRwSentMsgChanging(value);
				this.SendPropertyChanging();
				this._RwSentMsg = value;
				this.SendPropertyChanged("RwSentMsg");
				this.OnRwSentMsgChanged();
			}
		}
	}
	
	[Column(Storage="_MessageKey", DbType="NChar(20)")]
	public string MessageKey
	{
		get
		{
			return this._MessageKey;
		}
		set
		{
			if ((this._MessageKey != value))
			{
				this.OnMessageKeyChanging(value);
				this.SendPropertyChanging();
				this._MessageKey = value;
				this.SendPropertyChanged("MessageKey");
				this.OnMessageKeyChanged();
			}
		}
	}
	
	[Column(Storage="_TimeAndDateSent", DbType="DateTime")]
	public System.Nullable<System.DateTime> TimeAndDateSent
	{
		get
		{
			return this._TimeAndDateSent;
		}
		set
		{
			if ((this._TimeAndDateSent != value))
			{
				this.OnTimeAndDateSentChanging(value);
				this.SendPropertyChanging();
				this._TimeAndDateSent = value;
				this.SendPropertyChanged("TimeAndDateSent");
				this.OnTimeAndDateSentChanged();
			}
		}
	}
	
	[Column(Storage="_codeError", DbType="NChar(20)")]
	public string codeError
	{
		get
		{
			return this._codeError;
		}
		set
		{
			if ((this._codeError != value))
			{
				this.OncodeErrorChanging(value);
				this.SendPropertyChanging();
				this._codeError = value;
				this.SendPropertyChanged("codeError");
				this.OncodeErrorChanged();
			}
		}
	}
	
	[Association(Name="LabConfiguration_OutGoingMessage", Storage="_LabConfiguration", ThisKey="LabConfigurationID", IsForeignKey=true)]
	public LabConfiguration LabConfiguration
	{
		get
		{
			return this._LabConfiguration.Entity;
		}
		set
		{
			LabConfiguration previousValue = this._LabConfiguration.Entity;
			if (((previousValue != value) 
						|| (this._LabConfiguration.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._LabConfiguration.Entity = null;
					previousValue.OutGoingMessages.Remove(this);
				}
				this._LabConfiguration.Entity = value;
				if ((value != null))
				{
					value.OutGoingMessages.Add(this);
					this._LabConfigurationID = value.LabConfigurationID;
				}
				else
				{
					this._LabConfigurationID = default(Nullable<int>);
				}
				this.SendPropertyChanged("LabConfiguration");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
