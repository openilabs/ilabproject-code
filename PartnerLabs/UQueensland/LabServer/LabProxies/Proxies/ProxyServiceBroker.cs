//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.1432.
// 
namespace Library.LabServerEngine {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceBrokerServiceSoap", Namespace="http://ilab.mit.edu")]
    public partial class ServiceBrokerService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        public sbAuthHeader sbAuthHeaderValue;
        
        private System.Threading.SendOrPostCallback CancelOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEffectiveQueueLengthOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExperimentStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLabConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLabInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLabStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateOperationCompleted;
        
        private System.Threading.SendOrPostCallback NotifyOperationCompleted;
        
        /// <remarks/>
        public ServiceBrokerService() {
            this.Url = "http://localhost:8085/IServiceBrokerService.asmx";
        }
        
        /// <remarks/>
        public event CancelCompletedEventHandler CancelCompleted;
        
        /// <remarks/>
        public event GetEffectiveQueueLengthCompletedEventHandler GetEffectiveQueueLengthCompleted;
        
        /// <remarks/>
        public event GetExperimentStatusCompletedEventHandler GetExperimentStatusCompleted;
        
        /// <remarks/>
        public event GetLabConfigurationCompletedEventHandler GetLabConfigurationCompleted;
        
        /// <remarks/>
        public event GetLabInfoCompletedEventHandler GetLabInfoCompleted;
        
        /// <remarks/>
        public event GetLabStatusCompletedEventHandler GetLabStatusCompleted;
        
        /// <remarks/>
        public event RetrieveResultCompletedEventHandler RetrieveResultCompleted;
        
        /// <remarks/>
        public event SubmitCompletedEventHandler SubmitCompleted;
        
        /// <remarks/>
        public event ValidateCompletedEventHandler ValidateCompleted;
        
        /// <remarks/>
        public event NotifyCompletedEventHandler NotifyCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/Cancel", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Cancel(int experimentID) {
            object[] results = this.Invoke("Cancel", new object[] {
                        experimentID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCancel(int experimentID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Cancel", new object[] {
                        experimentID}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCancel(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CancelAsync(int experimentID) {
            this.CancelAsync(experimentID, null);
        }
        
        /// <remarks/>
        public void CancelAsync(int experimentID, object userState) {
            if ((this.CancelOperationCompleted == null)) {
                this.CancelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelOperationCompleted);
            }
            this.InvokeAsync("Cancel", new object[] {
                        experimentID}, this.CancelOperationCompleted, userState);
        }
        
        private void OnCancelOperationCompleted(object arg) {
            if ((this.CancelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelCompleted(this, new CancelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/GetEffectiveQueueLength", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WaitEstimate GetEffectiveQueueLength(string labServerID, int priorityHint) {
            object[] results = this.Invoke("GetEffectiveQueueLength", new object[] {
                        labServerID,
                        priorityHint});
            return ((WaitEstimate)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEffectiveQueueLength(string labServerID, int priorityHint, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEffectiveQueueLength", new object[] {
                        labServerID,
                        priorityHint}, callback, asyncState);
        }
        
        /// <remarks/>
        public WaitEstimate EndGetEffectiveQueueLength(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WaitEstimate)(results[0]));
        }
        
        /// <remarks/>
        public void GetEffectiveQueueLengthAsync(string labServerID, int priorityHint) {
            this.GetEffectiveQueueLengthAsync(labServerID, priorityHint, null);
        }
        
        /// <remarks/>
        public void GetEffectiveQueueLengthAsync(string labServerID, int priorityHint, object userState) {
            if ((this.GetEffectiveQueueLengthOperationCompleted == null)) {
                this.GetEffectiveQueueLengthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEffectiveQueueLengthOperationCompleted);
            }
            this.InvokeAsync("GetEffectiveQueueLength", new object[] {
                        labServerID,
                        priorityHint}, this.GetEffectiveQueueLengthOperationCompleted, userState);
        }
        
        private void OnGetEffectiveQueueLengthOperationCompleted(object arg) {
            if ((this.GetEffectiveQueueLengthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEffectiveQueueLengthCompleted(this, new GetEffectiveQueueLengthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/GetExperimentStatus", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LabExperimentStatus GetExperimentStatus(int experimentID) {
            object[] results = this.Invoke("GetExperimentStatus", new object[] {
                        experimentID});
            return ((LabExperimentStatus)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetExperimentStatus(int experimentID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetExperimentStatus", new object[] {
                        experimentID}, callback, asyncState);
        }
        
        /// <remarks/>
        public LabExperimentStatus EndGetExperimentStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((LabExperimentStatus)(results[0]));
        }
        
        /// <remarks/>
        public void GetExperimentStatusAsync(int experimentID) {
            this.GetExperimentStatusAsync(experimentID, null);
        }
        
        /// <remarks/>
        public void GetExperimentStatusAsync(int experimentID, object userState) {
            if ((this.GetExperimentStatusOperationCompleted == null)) {
                this.GetExperimentStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExperimentStatusOperationCompleted);
            }
            this.InvokeAsync("GetExperimentStatus", new object[] {
                        experimentID}, this.GetExperimentStatusOperationCompleted, userState);
        }
        
        private void OnGetExperimentStatusOperationCompleted(object arg) {
            if ((this.GetExperimentStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExperimentStatusCompleted(this, new GetExperimentStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/GetLabConfiguration", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLabConfiguration(string labServerID) {
            object[] results = this.Invoke("GetLabConfiguration", new object[] {
                        labServerID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLabConfiguration(string labServerID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLabConfiguration", new object[] {
                        labServerID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetLabConfiguration(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLabConfigurationAsync(string labServerID) {
            this.GetLabConfigurationAsync(labServerID, null);
        }
        
        /// <remarks/>
        public void GetLabConfigurationAsync(string labServerID, object userState) {
            if ((this.GetLabConfigurationOperationCompleted == null)) {
                this.GetLabConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLabConfigurationOperationCompleted);
            }
            this.InvokeAsync("GetLabConfiguration", new object[] {
                        labServerID}, this.GetLabConfigurationOperationCompleted, userState);
        }
        
        private void OnGetLabConfigurationOperationCompleted(object arg) {
            if ((this.GetLabConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLabConfigurationCompleted(this, new GetLabConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/GetLabInfo", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLabInfo(string labServerID) {
            object[] results = this.Invoke("GetLabInfo", new object[] {
                        labServerID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLabInfo(string labServerID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLabInfo", new object[] {
                        labServerID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetLabInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLabInfoAsync(string labServerID) {
            this.GetLabInfoAsync(labServerID, null);
        }
        
        /// <remarks/>
        public void GetLabInfoAsync(string labServerID, object userState) {
            if ((this.GetLabInfoOperationCompleted == null)) {
                this.GetLabInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLabInfoOperationCompleted);
            }
            this.InvokeAsync("GetLabInfo", new object[] {
                        labServerID}, this.GetLabInfoOperationCompleted, userState);
        }
        
        private void OnGetLabInfoOperationCompleted(object arg) {
            if ((this.GetLabInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLabInfoCompleted(this, new GetLabInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/GetLabStatus", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LabStatus GetLabStatus(string labServerID) {
            object[] results = this.Invoke("GetLabStatus", new object[] {
                        labServerID});
            return ((LabStatus)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLabStatus(string labServerID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLabStatus", new object[] {
                        labServerID}, callback, asyncState);
        }
        
        /// <remarks/>
        public LabStatus EndGetLabStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((LabStatus)(results[0]));
        }
        
        /// <remarks/>
        public void GetLabStatusAsync(string labServerID) {
            this.GetLabStatusAsync(labServerID, null);
        }
        
        /// <remarks/>
        public void GetLabStatusAsync(string labServerID, object userState) {
            if ((this.GetLabStatusOperationCompleted == null)) {
                this.GetLabStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLabStatusOperationCompleted);
            }
            this.InvokeAsync("GetLabStatus", new object[] {
                        labServerID}, this.GetLabStatusOperationCompleted, userState);
        }
        
        private void OnGetLabStatusOperationCompleted(object arg) {
            if ((this.GetLabStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLabStatusCompleted(this, new GetLabStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/RetrieveResult", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultReport RetrieveResult(int experimentID) {
            object[] results = this.Invoke("RetrieveResult", new object[] {
                        experimentID});
            return ((ResultReport)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRetrieveResult(int experimentID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetrieveResult", new object[] {
                        experimentID}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultReport EndRetrieveResult(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultReport)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveResultAsync(int experimentID) {
            this.RetrieveResultAsync(experimentID, null);
        }
        
        /// <remarks/>
        public void RetrieveResultAsync(int experimentID, object userState) {
            if ((this.RetrieveResultOperationCompleted == null)) {
                this.RetrieveResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveResultOperationCompleted);
            }
            this.InvokeAsync("RetrieveResult", new object[] {
                        experimentID}, this.RetrieveResultOperationCompleted, userState);
        }
        
        private void OnRetrieveResultOperationCompleted(object arg) {
            if ((this.RetrieveResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveResultCompleted(this, new RetrieveResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/Submit", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SubmissionReport Submit(string labServerID, string experimentSpecification, int priorityHint, bool emailNotification) {
            object[] results = this.Invoke("Submit", new object[] {
                        labServerID,
                        experimentSpecification,
                        priorityHint,
                        emailNotification});
            return ((SubmissionReport)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSubmit(string labServerID, string experimentSpecification, int priorityHint, bool emailNotification, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Submit", new object[] {
                        labServerID,
                        experimentSpecification,
                        priorityHint,
                        emailNotification}, callback, asyncState);
        }
        
        /// <remarks/>
        public SubmissionReport EndSubmit(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SubmissionReport)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitAsync(string labServerID, string experimentSpecification, int priorityHint, bool emailNotification) {
            this.SubmitAsync(labServerID, experimentSpecification, priorityHint, emailNotification, null);
        }
        
        /// <remarks/>
        public void SubmitAsync(string labServerID, string experimentSpecification, int priorityHint, bool emailNotification, object userState) {
            if ((this.SubmitOperationCompleted == null)) {
                this.SubmitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitOperationCompleted);
            }
            this.InvokeAsync("Submit", new object[] {
                        labServerID,
                        experimentSpecification,
                        priorityHint,
                        emailNotification}, this.SubmitOperationCompleted, userState);
        }
        
        private void OnSubmitOperationCompleted(object arg) {
            if ((this.SubmitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitCompleted(this, new SubmitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/Validate", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ValidationReport Validate(string labServerID, string experimentSpecification) {
            object[] results = this.Invoke("Validate", new object[] {
                        labServerID,
                        experimentSpecification});
            return ((ValidationReport)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginValidate(string labServerID, string experimentSpecification, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Validate", new object[] {
                        labServerID,
                        experimentSpecification}, callback, asyncState);
        }
        
        /// <remarks/>
        public ValidationReport EndValidate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ValidationReport)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateAsync(string labServerID, string experimentSpecification) {
            this.ValidateAsync(labServerID, experimentSpecification, null);
        }
        
        /// <remarks/>
        public void ValidateAsync(string labServerID, string experimentSpecification, object userState) {
            if ((this.ValidateOperationCompleted == null)) {
                this.ValidateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateOperationCompleted);
            }
            this.InvokeAsync("Validate", new object[] {
                        labServerID,
                        experimentSpecification}, this.ValidateOperationCompleted, userState);
        }
        
        private void OnValidateOperationCompleted(object arg) {
            if ((this.ValidateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateCompleted(this, new ValidateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("sbAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.mit.edu/Notify", RequestNamespace="http://ilab.mit.edu", ResponseNamespace="http://ilab.mit.edu", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Notify(int experimentID) {
            this.Invoke("Notify", new object[] {
                        experimentID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginNotify(int experimentID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Notify", new object[] {
                        experimentID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndNotify(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void NotifyAsync(int experimentID) {
            this.NotifyAsync(experimentID, null);
        }
        
        /// <remarks/>
        public void NotifyAsync(int experimentID, object userState) {
            if ((this.NotifyOperationCompleted == null)) {
                this.NotifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNotifyOperationCompleted);
            }
            this.InvokeAsync("Notify", new object[] {
                        experimentID}, this.NotifyOperationCompleted, userState);
        }
        
        private void OnNotifyOperationCompleted(object arg) {
            if ((this.NotifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NotifyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public void CancelAsync1(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ilab.mit.edu")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://ilab.mit.edu", IsNullable=false)]
    public partial class sbAuthHeader : System.Web.Services.Protocols.SoapHeader {
        
        /// <remarks/>
        public long couponID;
        
        /// <remarks/>
        public string couponPassKey;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ilab.mit.edu")]
    public partial class ValidationReport {
        
        /// <remarks/>
        public bool accepted;
        
        /// <remarks/>
        public string[] warningMessages;
        
        /// <remarks/>
        public string errorMessage;
        
        /// <remarks/>
        public double estRuntime;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ilab.mit.edu")]
    public partial class SubmissionReport {
        
        /// <remarks/>
        public ValidationReport vReport;
        
        /// <remarks/>
        public int experimentID;
        
        /// <remarks/>
        public double minTimeToLive;
        
        /// <remarks/>
        public WaitEstimate wait;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ilab.mit.edu")]
    public partial class WaitEstimate {
        
        /// <remarks/>
        public int effectiveQueueLength;
        
        /// <remarks/>
        public double estWait;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ilab.mit.edu")]
    public partial class ResultReport {
        
        /// <remarks/>
        public int statusCode;
        
        /// <remarks/>
        public string experimentResults;
        
        /// <remarks/>
        public string xmlResultExtension;
        
        /// <remarks/>
        public string xmlBlobExtension;
        
        /// <remarks/>
        public string[] warningMessages;
        
        /// <remarks/>
        public string errorMessage;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ilab.mit.edu")]
    public partial class LabStatus {
        
        /// <remarks/>
        public bool online;
        
        /// <remarks/>
        public string labStatusMessage;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ilab.mit.edu")]
    public partial class ExperimentStatus {
        
        /// <remarks/>
        public int statusCode;
        
        /// <remarks/>
        public WaitEstimate wait;
        
        /// <remarks/>
        public double estRuntime;
        
        /// <remarks/>
        public double estRemainingRuntime;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ilab.mit.edu")]
    public partial class LabExperimentStatus {
        
        /// <remarks/>
        public ExperimentStatus statusReport;
        
        /// <remarks/>
        public double minTimetoLive;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void CancelCompletedEventHandler(object sender, CancelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetEffectiveQueueLengthCompletedEventHandler(object sender, GetEffectiveQueueLengthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEffectiveQueueLengthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEffectiveQueueLengthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WaitEstimate Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WaitEstimate)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetExperimentStatusCompletedEventHandler(object sender, GetExperimentStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExperimentStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExperimentStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LabExperimentStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LabExperimentStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetLabConfigurationCompletedEventHandler(object sender, GetLabConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLabConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLabConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetLabInfoCompletedEventHandler(object sender, GetLabInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLabInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLabInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetLabStatusCompletedEventHandler(object sender, GetLabStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLabStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLabStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LabStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LabStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void RetrieveResultCompletedEventHandler(object sender, RetrieveResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultReport Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultReport)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void SubmitCompletedEventHandler(object sender, SubmitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SubmissionReport Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SubmissionReport)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void ValidateCompletedEventHandler(object sender, ValidateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ValidationReport Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ValidationReport)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void NotifyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
