//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.1432.
// 
namespace Library.LabServerEngine.Drivers.Equipment {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="EquipmentServiceSoap", Namespace="http://ilab.uq.edu.au/")]
    public partial class EquipmentService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        public AuthHeader AuthHeaderValue;
        
        private System.Threading.SendOrPostCallback GetLabEquipmentStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTimeUntilReadyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SuspendPowerdownOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResumePowerdownOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteRequestOperationCompleted;
        
        /// <remarks/>
        public EquipmentService() {
            this.Url = "http://localhost:8087/IEquipmentService.asmx";
        }
        
        /// <remarks/>
        public event GetLabEquipmentStatusCompletedEventHandler GetLabEquipmentStatusCompleted;
        
        /// <remarks/>
        public event GetTimeUntilReadyCompletedEventHandler GetTimeUntilReadyCompleted;
        
        /// <remarks/>
        public event SuspendPowerdownCompletedEventHandler SuspendPowerdownCompleted;
        
        /// <remarks/>
        public event ResumePowerdownCompletedEventHandler ResumePowerdownCompleted;
        
        /// <remarks/>
        public event ExecuteRequestCompletedEventHandler ExecuteRequestCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.uq.edu.au/GetLabEquipmentStatus", RequestNamespace="http://ilab.uq.edu.au/", ResponseNamespace="http://ilab.uq.edu.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LabEquipmentStatus GetLabEquipmentStatus() {
            object[] results = this.Invoke("GetLabEquipmentStatus", new object[0]);
            return ((LabEquipmentStatus)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLabEquipmentStatus(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLabEquipmentStatus", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public LabEquipmentStatus EndGetLabEquipmentStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((LabEquipmentStatus)(results[0]));
        }
        
        /// <remarks/>
        public void GetLabEquipmentStatusAsync() {
            this.GetLabEquipmentStatusAsync(null);
        }
        
        /// <remarks/>
        public void GetLabEquipmentStatusAsync(object userState) {
            if ((this.GetLabEquipmentStatusOperationCompleted == null)) {
                this.GetLabEquipmentStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLabEquipmentStatusOperationCompleted);
            }
            this.InvokeAsync("GetLabEquipmentStatus", new object[0], this.GetLabEquipmentStatusOperationCompleted, userState);
        }
        
        private void OnGetLabEquipmentStatusOperationCompleted(object arg) {
            if ((this.GetLabEquipmentStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLabEquipmentStatusCompleted(this, new GetLabEquipmentStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.uq.edu.au/GetTimeUntilReady", RequestNamespace="http://ilab.uq.edu.au/", ResponseNamespace="http://ilab.uq.edu.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetTimeUntilReady() {
            object[] results = this.Invoke("GetTimeUntilReady", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTimeUntilReady(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTimeUntilReady", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetTimeUntilReady(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetTimeUntilReadyAsync() {
            this.GetTimeUntilReadyAsync(null);
        }
        
        /// <remarks/>
        public void GetTimeUntilReadyAsync(object userState) {
            if ((this.GetTimeUntilReadyOperationCompleted == null)) {
                this.GetTimeUntilReadyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTimeUntilReadyOperationCompleted);
            }
            this.InvokeAsync("GetTimeUntilReady", new object[0], this.GetTimeUntilReadyOperationCompleted, userState);
        }
        
        private void OnGetTimeUntilReadyOperationCompleted(object arg) {
            if ((this.GetTimeUntilReadyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTimeUntilReadyCompleted(this, new GetTimeUntilReadyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.uq.edu.au/SuspendPowerdown", RequestNamespace="http://ilab.uq.edu.au/", ResponseNamespace="http://ilab.uq.edu.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SuspendPowerdown() {
            object[] results = this.Invoke("SuspendPowerdown", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSuspendPowerdown(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SuspendPowerdown", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndSuspendPowerdown(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SuspendPowerdownAsync() {
            this.SuspendPowerdownAsync(null);
        }
        
        /// <remarks/>
        public void SuspendPowerdownAsync(object userState) {
            if ((this.SuspendPowerdownOperationCompleted == null)) {
                this.SuspendPowerdownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSuspendPowerdownOperationCompleted);
            }
            this.InvokeAsync("SuspendPowerdown", new object[0], this.SuspendPowerdownOperationCompleted, userState);
        }
        
        private void OnSuspendPowerdownOperationCompleted(object arg) {
            if ((this.SuspendPowerdownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SuspendPowerdownCompleted(this, new SuspendPowerdownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.uq.edu.au/ResumePowerdown", RequestNamespace="http://ilab.uq.edu.au/", ResponseNamespace="http://ilab.uq.edu.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ResumePowerdown() {
            object[] results = this.Invoke("ResumePowerdown", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginResumePowerdown(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ResumePowerdown", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndResumePowerdown(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ResumePowerdownAsync() {
            this.ResumePowerdownAsync(null);
        }
        
        /// <remarks/>
        public void ResumePowerdownAsync(object userState) {
            if ((this.ResumePowerdownOperationCompleted == null)) {
                this.ResumePowerdownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResumePowerdownOperationCompleted);
            }
            this.InvokeAsync("ResumePowerdown", new object[0], this.ResumePowerdownOperationCompleted, userState);
        }
        
        private void OnResumePowerdownOperationCompleted(object arg) {
            if ((this.ResumePowerdownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResumePowerdownCompleted(this, new ResumePowerdownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.uq.edu.au/ExecuteRequest", RequestNamespace="http://ilab.uq.edu.au/", ResponseNamespace="http://ilab.uq.edu.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExecuteRequest(string xmlRequest) {
            object[] results = this.Invoke("ExecuteRequest", new object[] {
                        xmlRequest});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExecuteRequest(string xmlRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteRequest", new object[] {
                        xmlRequest}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndExecuteRequest(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteRequestAsync(string xmlRequest) {
            this.ExecuteRequestAsync(xmlRequest, null);
        }
        
        /// <remarks/>
        public void ExecuteRequestAsync(string xmlRequest, object userState) {
            if ((this.ExecuteRequestOperationCompleted == null)) {
                this.ExecuteRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteRequestOperationCompleted);
            }
            this.InvokeAsync("ExecuteRequest", new object[] {
                        xmlRequest}, this.ExecuteRequestOperationCompleted, userState);
        }
        
        private void OnExecuteRequestOperationCompleted(object arg) {
            if ((this.ExecuteRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteRequestCompleted(this, new ExecuteRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ilab.uq.edu.au/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://ilab.uq.edu.au/", IsNullable=false)]
    public partial class AuthHeader : System.Web.Services.Protocols.SoapHeader {
        
        /// <remarks/>
        public string identifier;
        
        /// <remarks/>
        public string passKey;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ilab.uq.edu.au/")]
    public partial class LabEquipmentStatus {
        
        /// <remarks/>
        public bool online;
        
        /// <remarks/>
        public string statusMessage;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetLabEquipmentStatusCompletedEventHandler(object sender, GetLabEquipmentStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLabEquipmentStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLabEquipmentStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LabEquipmentStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LabEquipmentStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetTimeUntilReadyCompletedEventHandler(object sender, GetTimeUntilReadyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTimeUntilReadyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTimeUntilReadyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void SuspendPowerdownCompletedEventHandler(object sender, SuspendPowerdownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SuspendPowerdownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SuspendPowerdownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void ResumePowerdownCompletedEventHandler(object sender, ResumePowerdownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResumePowerdownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResumePowerdownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void ExecuteRequestCompletedEventHandler(object sender, ExecuteRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
