Imports System
Imports System.Configuration
Imports System.Data.SqlClient
Imports Microsoft.VisualBasic

Imports WebLab.DataTypes


'Author(s): James Hardison (hardison@alum.mit.edu)
'Date: 6/23/2003
'Date Modified: 9/20/2004
'This class provides a VB interface to the WebLab Records Manager methods defined in the Lab server database.  This interface is intended to 
'serve the ASP.NET code that will for the backend of both the Lab Server Administration Site and the Web Services interface that will be exposed
'for use by registered Service Brokers.  To use these methods in your ASP.NET page, first, make sure a compiled copy of this file is present in 
'the /bin directory of your web application.  In your ASP.NET page, import the WebLabDataManagers namespace 
'(<%import namespace="WebLabDataManagers"%>) and, in your code, instantiate a RecordManager object.  From this object, all of the 
'public methods listed below will be accessible.
'
'Dependency List
'Used By:
'   Site Login Page (/login.aspx)
'   Service Broker Notification Script (/notify.aspx)
'   Lab Server Web Services Interface (/services/WebLabServices/LabServerAPI.vb, /bin/WebLabServices.dll)
'   Lab Server Record Manager Library (/bin/RecordManager.dll (this code))
'
'Uses: 
'   WebLab Custom Data Types (/controls/WebLabCustomDataTypes/WebLabCustomDataTypes.vb, /bin/WebLabCustomDataTypes.dll)

Namespace WebLab.DataManagers

    Public Class RecordManager

        Dim conWebLabLS As SqlConnection = New SqlConnection(ConfigurationManager.AppSettings("conString"))

        Public Function RetrieveResult(ByVal intBrokerID As Integer, ByVal intBrokerExpID As Integer) As ResultObject
            'This method retrieves the result information associated with the job specified by the Broker ID, Broker Generated Experiment ID pair.
            'The output is of the form of an experiment status code, an experiment result string (XML encoded), any warning messages as well as 
            'fatal errors generated by the experiment.  Specifically, the output will depend on the state of the input experiment code and, 
            'thus, on the value of the experiment status code.  Below is a chart describing the different cases.
            '   experimentStatus = 1    -   job is still in the queue, all other values empty.
            '   experimentStatus = 2    -   job is currently running, all other values empty.
            '   experimetnStatus = 3    -   job terminated normally, experimentResults is populated, warningMessages may be populated.
            '   experimentStatus = 4    -   job terminated with errors, errorMessage is populated, experimentResults may be populated.
            '   experimentStatus = 5    -   job was cancelled by user, all other values empty.
            '   experimentStatus = 6    -   input experiment ID is invalid.

            conWebLabLS.Open()
            Dim strDBQuery As String
            Dim roOutput As ResultObject
            Dim cmdDBQuery As SqlCommand
            Dim dtrDBQuery As SqlDataReader

            strDBQuery = "EXEC rm_RetrieveResultByRemoteID @BrokerID, @ExpID;"
            cmdDBQuery = New SqlCommand(strDBQuery, conWebLabLS)
            cmdDBQuery.Parameters.AddWithValue("@BrokerID", intBrokerID)
            cmdDBQuery.Parameters.AddWithValue("@ExpID", intBrokerExpID)
            dtrDBQuery = cmdDBQuery.ExecuteReader()

            dtrDBQuery.Read()

            roOutput = New ResultObject(CInt(dtrDBQuery("experimentStatus")), dtrDBQuery("experimentResults"), dtrDBQuery("warningMessages"), dtrDBQuery("errorMessages"), dtrDBQuery("labConfig"))

            dtrDBQuery.Close()
            conWebLabLS.Close()

            Return roOutput
        End Function


        Public Function RetrieveResult(ByVal intLocaLExpId As Integer) As ResultObject
            'This method retrieves the result information for the job specified by the Locally Generated Experiment ID.  The output is of the form 
            'of an experiment status code, an experiment result string (XML encoded), any warning messages as well as fatal errors generated by the 
            'experiment.  Specifically, the output will depend on the state of the input experiment code and, thus, on the value of the experiment 
            'status code.  Below is a chart describing the different cases.
            '   experimentStatus = 1    -   job is still in the queue, all other values empty.
            '   experimentStatus = 2    -   job is currently running, all other values empty.
            '   experimetnStatus = 3    -   job terminated normally, experimentResults is populated, warningMessages may be populated.
            '   experimentStatus = 4    -   job terminated with errors, errorMessage is populated, experimentResults may be populated.
            '   experimentStatus = 5    -   job was cancelled by user, all other values empty.
            '   experimentStatus = 6    -   input experiment ID is invalid.

            conWebLabLS.Open()
            Dim strDBQuery As String
            Dim roOutput As ResultObject
            Dim cmdDBQuery As SqlCommand
            Dim dtrDBQuery As SqlDataReader

            strDBQuery = "EXEC rm_RetrieveResultByLocalID @ExpID;"
            cmdDBQuery = New SqlCommand(strDBQuery, conWebLabLS)
            cmdDBQuery.Parameters.AddWithValue("@ExpID", intLocaLExpId)
            dtrDBQuery = cmdDBQuery.ExecuteReader()

            dtrDBQuery.Read()

            roOutput = New ResultObject(CInt(dtrDBQuery("experimentStatus")), dtrDBQuery("experimentResults"), dtrDBQuery("warningMessages"), dtrDBQuery("errorMessages"), dtrDBQuery("labConfig"))

            dtrDBQuery.Close()
            conWebLabLS.Close()

            Return roOutput
        End Function


        Public Function ExperimentRuntimeEst(ByVal intDataPoints As Integer, ByVal intSetupID As Integer) As Integer
            'This method calculates an estimate of the time it will take for a given job to execute.  The output of this function is an integer 
            'value representing the estimated time (in seconds) that a submitted job will take to execute.  This estimate is based on the setup 
            'that the job is running on and the number of data points being recorded.  This estimate DOES NOT consider the job's wait in the 
            'experiment queue.  This method is intended to be called by a job submission function after the argument experiment specification 
            'has been validated but before it is enqueued. 

            conWebLabLS.Open()
            Dim strDBQuery As String
            Dim cmdDBQuery As SqlCommand
            Dim intOutput As Integer

            strDBQuery = "SELECT dbo.rm_ExpRuntimeEstimate(@Points, @SetupID);"
            cmdDBQuery = New SqlCommand(strDBQuery, conWebLabLS)
            cmdDBQuery.Parameters.AddWithValue("@Points", intDataPoints)
            cmdDBQuery.Parameters.AddWithValue("@SetupID", intSetupID)

            intOutput = cmdDBQuery.ExecuteScalar()

            conWebLabLS.Close()

            Return intOutput
        End Function


        Public Function GetExperimentRecordInfo(ByVal intBrokerID As Integer, ByVal intBrokerExpID As Integer) As ExpRecordInfoObject
            'This method retrieves information on a job specified by Broker ID and a Broker Generated Experiment ID.  The output of this function 
            'is an Experiment Record Information Object containing the public record fields of the specified job.  An invalid expId will result     
            'in an empty return value.
            conWebLabLS.Open()
            Dim strDBQuery, strSetupName As String
            Dim eriOutput As ExpRecordInfoObject
            Dim cmdDBQuery As SqlCommand
            Dim dtrDBQuery As SqlDataReader

            strDBQuery = "SELECT user_group, submit_time, exec_time, end_time, exec_elapsed, job_elapsed, setup_name FROM dbo.rm_ExpRecordInfoByRemoteID(@BrokerID, @expID);"
            cmdDBQuery = New SqlCommand(strDBQuery, conWebLabLS)
            cmdDBQuery.Parameters.AddWithValue("@BrokerID", intBrokerID)
            cmdDBQuery.Parameters.AddWithValue("@expID", intBrokerExpID)
            dtrDBQuery = cmdDBQuery.ExecuteReader()

            dtrDBQuery.Read()

            If TypeName(dtrDBQuery("setup_name")) = "DBNull" Then
                strSetupName = ""
            Else
                strSetupName = dtrDBQuery("setup_name")
            End If

            eriOutput = New ExpRecordInfoObject(dtrDBQuery("user_group"), dtrDBQuery("submit_time"), dtrDBQuery("exec_time"), dtrDBQuery("end_time"), CInt(dtrDBQuery("exec_elapsed")), CInt(dtrDBQuery("job_elapsed")), strSetupName)

            dtrDBQuery.Close()

            conWebLabLS.Close()
            Return eriOutput
        End Function


        Public Function GetExperimentRecordInfo(ByVal intLocalExpID As Integer) As ExpRecordInfoObject
            'This method retrieves information on a job specified by its Locally Generated Experiment ID.  The output of this function 
            'is an Experiment Record Information Object containing the public record fields of the specified job.  An invalid expId 
            'will result in an empty return value
            conWebLabLS.Open()
            Dim strDBQuery, strSetupName As String
            Dim eriOutput As ExpRecordInfoObject
            Dim cmdDBQuery As SqlCommand
            Dim dtrDBQuery As SqlDataReader

            strDBQuery = "SELECT user_group, submit_time, exec_time, end_time, exec_elapsed, job_elapsed, setup_name FROM dbo.rm_ExpRecordInfoByLocalID(@expID);"
            cmdDBQuery = New SqlCommand(strDBQuery, conWebLabLS)
            cmdDBQuery.Parameters.AddWithValue("@expID", intLocalExpID)
            dtrDBQuery = cmdDBQuery.ExecuteReader()

            dtrDBQuery.Read()

            If TypeName(dtrDBQuery("setup_name")) = "DBNull" Then
                strSetupName = ""
            Else
                strSetupName = dtrDBQuery("setup_name")
            End If

            eriOutput = New ExpRecordInfoObject(dtrDBQuery("user_group"), dtrDBQuery("submit_time"), dtrDBQuery("exec_time"), dtrDBQuery("end_time"), CInt(dtrDBQuery("exec_elapsed")), CInt(dtrDBQuery("job_elapsed")), strSetupName)

            dtrDBQuery.Close()

            conWebLabLS.Close()
            Return eriOutput
        End Function


        Public Function LocalExperimentIDLookup(ByVal intBrokerID As Integer, ByVal intBrokerExpID As Integer) As Integer
            'This method invokes the SQL UDF called rm_ExpIdLookup.  The purpose of this method is to give the caller the ability to retrieve the locally
            'assigned experiment id when the appropriate brokerID/broker assigned experiment id combination is provided.
            conWebLabLS.Open()
            Dim strDBQuery As String
            Dim cmdDBQuery As SqlCommand
            Dim intOutput As Integer

            strDBQuery = "SELECT dbo.rm_ExpIdLookup(@BrokerID, @brokerExpID);"
            cmdDBQuery = New SqlCommand(strDBQuery, conWebLabLS)
            cmdDBQuery.Parameters.AddWithValue("@BrokerID", intBrokerID)
            cmdDBQuery.Parameters.AddWithValue("@brokerExpID", intBrokerExpID)

            intOutput = cmdDBQuery.ExecuteScalar()

            conWebLabLS.Close()

            Return intOutput
        End Function


        Public Sub LogSiteLogon(ByVal intUserID As Integer, ByVal strRemoteIP As String, ByVal strUserAgent As String, ByVal blnIsNewLogon As Boolean)
            'This method provides the Lab Server Administration site with a well defined and encapsulated way of logging 
            'site logon events.  intUserID refers to the internal user id associated with the login.  strRemoteIP and 
            'strUserAgent refer to the requestor's IP address and platform signature, respectively.  Finally, blnIsNewLogon
            'catpures whether the login has been performed manually (unauthenticated agent logging in using the username/password
            'fields) or automatically (via previously written cookie).  This method has no return value.
            conWebLabLS.Open()
            Dim strDBQuery, strLoginType As String
            Dim cmdDBQuery As SqlCommand

            If blnIsNewLogon Then
                strLoginType = "MANUAL"
            Else
                strLoginType = "COOKIE"
            End If

            strDBQuery = "INSERT INTO LoginRecord (login_type, user_id, remote_ip, user_agent) VALUES (@LoginType, @UserID, @RemoteIP, @UserAgent);"
            cmdDBQuery = New SqlCommand(strDBQuery, conWebLabLS)
            cmdDBQuery.Parameters.AddWithValue("@LoginType", strLoginType)
            cmdDBQuery.Parameters.AddWithValue("@UserID", intUserID)
            cmdDBQuery.Parameters.AddWithValue("@RemoteIP", strRemoteIP)
            cmdDBQuery.Parameters.AddWithValue("@UserAgent", strUserAgent)

            cmdDBQuery.ExecuteNonQuery()

            conWebLabLS.Close()
        End Sub


        Public Sub LogIncomingWebRequest(ByVal intBrokerID As Integer, ByVal strMethodName As String, ByVal blnHasPermission As Boolean, ByVal blnSuccessful As Boolean, ByVal strCompletionStatus As String)
            'This method is a logging mechanism used to trace incoming traffic through the Lab Server Web Service Channel.  The input is the 
            'broker ID used for the method call, the name of the method being called, whether the caller had permission to make the call 
            '(termination based on code completion/error or lack of permission) and a string describing the state of the method at termination.  
            conWebLabLS.Open()
            Dim strDBQuery As String
            Dim cmdDBQuery As SqlCommand

            strDBQuery = "EXEC rm_LogIncomingWebRequest @brokerID, @method, @hasPermission, @success, @status;"
            cmdDBQuery = New SqlCommand(strDBQuery, conWebLabLS)
            cmdDBQuery.Parameters.AddWithValue("@brokerID", intBrokerID)
            cmdDBQuery.Parameters.AddWithValue("@method", strMethodName)
            cmdDBQuery.Parameters.AddWithValue("@hasPermission", blnHasPermission)
            cmdDBQuery.Parameters.AddWithValue("@success", blnSuccessful)
            cmdDBQuery.Parameters.AddWithValue("@status", strCompletionStatus)

            cmdDBQuery.ExecuteNonQuery()
            conWebLabLS.Close()
        End Sub

        Public Sub LogOutgoingWebRequest(ByVal intBrokerID As Integer, ByVal strMethodName As String, ByVal strDestURL As String, ByVal blnSuccess As Boolean, ByVal strCompletionStatus As String)
            'This method is a logging mechanism used to trace outgoing traffic through the Lab Server Web Service Channel.  The input is the 
            'broker ID of the machine where the method is being called from, the name of the method being called, the URL of that web method 
            'and a string describing the state of the request at termination.  
            conWebLabLS.Open()
            Dim strDBQuery As String
            Dim cmdDBQuery As SqlCommand

            strDBQuery = "EXEC rm_LogOutgoingWebRequest @brokerID, @method, @destURL, @success, @status;"
            cmdDBQuery = New SqlCommand(strDBQuery, conWebLabLS)
            cmdDBQuery.Parameters.AddWithValue("@brokerID", intBrokerID)
            cmdDBQuery.Parameters.AddWithValue("@method", strMethodName)
            cmdDBQuery.Parameters.AddWithValue("@destURL", strDestURL)
            cmdDBQuery.Parameters.AddWithValue("@success", blnSuccess)
            cmdDBQuery.Parameters.AddWithValue("@status", strCompletionStatus)

            cmdDBQuery.ExecuteNonQuery()
            conWebLabLS.Close()
        End Sub

    End Class

End Namespace
