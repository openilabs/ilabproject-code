Option Strict Off
Option Explicit On 

Imports System
Imports System.IO
Imports System.Runtime.InteropServices
Imports System.Threading

Namespace InstrumentDriverInterop.Ivi

    '''<summary>
    ''' This class provideds a wrapper around the Labview dlls that communicate with 
    ''' The ELVIS board for the OpAmp inverter experiment
    ''' </summary>
    Public Class Inverter
        Inherits Object
        Implements System.IDisposable

        Private errorVal As TD1
        Private _disposed As Boolean = True
        Private ELVISRefNum As IntPtr

        '''<summary>
        ''' Initialize communication with ELVIS
        '''</summary>
        Public Sub New()
            Me.errorVal = New TD1(False, 0, "")
            Me.ELVISRefNum = New IntPtr(0)
            PInvoke.InitializeELVIS(Me.ELVISRefNum, Me.errorVal)
            Console.WriteLine("My refNum is now " & Me.ELVISRefNum.ToString)
            Console.WriteLine("The error values are: status -> {0} Code -> {1} Source -> {2}", Me.errorVal.status, Me.errorVal.code, Me.errorVal.source)
            Me._disposed = False
        End Sub
        ''' <summary>
        ''' Runs an experiment given the parameters to use. returns an arrayList
        ''' with the waveform values generated by running the experiment
        ''' </summary>
        Public Function RunExperiment(ByVal frequencyHz As Double, ByVal peakAmplitudeV As Double, ByVal DCOffsetV As Double, ByVal waveformType As Short, ByVal SamplingRate As Double, ByVal SamplingTime As Double) As Double()()
            Console.WriteLine("Conducting the requested experiment")
            Console.WriteLine("The error values before the experiment are: status -> {0} Code -> {1} Source -> {2}", Me.errorVal.status, Me.errorVal.code, Me.errorVal.source)
            'calculate the length that we expect
            Dim len As Long
            len = Math.Round(Math.Min(200, (SamplingRate * SamplingTime) * 2))
            Console.WriteLine("The length returned will be " & len / 2)
            Dim waveform(len) As Double

            PInvoke.FGen(frequencyHz, peakAmplitudeV, DCOffsetV, waveformType, SamplingRate, SamplingTime, waveform(0), len, Me.errorVal, Me.errorVal)
            'parse the file and return an array with the values
            Console.WriteLine("My refNum is now " & Me.ELVISRefNum.ToString)
            Console.WriteLine("The error values are: status -> {0} Code -> {1} Source -> {2}", Me.errorVal.status, Me.errorVal.code, Me.errorVal.source)
            Console.WriteLine("The experiment is done")

            Dim results(2)() As Double

            Dim vin() As Double
            Dim vout() As Double

            ReDim vin(len / 2)
            ReDim vout(len / 2)

            Dim j, k As Integer
            For j = 0 To len - 1
                k = j Mod 2
                If k = 0 Then
                    vin(j / 2) = waveform(j)
                Else
                    vout((j - 1) / 2) = waveform(j)
                End If
                'results(k)((j - k) / 2) = waveform(j)
            Next
            results(0) = vin
            results(1) = vout
            Return results
        End Function
#Region "disposal"
        Protected Overrides Sub Finalize()
            Me.Dispose(False)
        End Sub

        Public Overloads Sub Dispose() Implements System.IDisposable.Dispose
            Me.Dispose(True)
            System.GC.SuppressFinalize(Me)
        End Sub

        Private Overloads Sub Dispose(ByVal disposing As Boolean)
            If (Me._disposed = False) Then
                PInvoke.CloseELVIS(Me.errorVal, Me.ELVISRefNum, Me.errorVal)
            End If
            Me._disposed = True
        End Sub
#End Region

        Private Class PInvoke
            <DllImport("D:\\iLabs\\WebLabElvis\\src\\labserver\\ExperimentSetups\\wrappers\\OpAmpInverter_V2\\labview\\OpAmpInverter.dll", EntryPoint:="InitializeELVIS", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function InitializeELVIS(ByRef ELVISRefNum As IntPtr, ByRef ErrorOut As TD1) As Integer
            End Function

            <DllImport("D:\\iLabs\\WebLabElvis\\src\\labserver\\ExperimentSetups\\wrappers\\OpAmpInverter_V2\\labview\\OpAmpInverter.dll", EntryPoint:="FGen", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function FGen(ByVal Frequency As Double, ByVal PeakAmplitude As Double, ByVal DCOffset As Double, ByVal WaveformType As Short, ByVal SamplingRate As Double, ByVal SamplingTime As Double, ByRef waveform As Double, ByVal len As Long, ByRef errorIn As TD1, ByRef errorOut As TD1) As Integer
            End Function

            <DllImport("D:\\iLabs\\WebLabElvis\\src\\labserver\\ExperimentSetups\\wrappers\\OpAmpInverter_V2\\labview\\OpAmpInverter.dll", EntryPoint:="CloseELVIS", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function CloseELVIS(ByRef ErrorIn As TD1, ByRef ELVISRefNum As IntPtr, ByRef ErrorOut As TD1) As Integer
            End Function

        End Class
        ''' <summary>
        ''' This struct stores the error messages returned by a DLL
        ''' </summary>
        Public Structure TD1
            Private statusVal As Boolean
            Private codeVal As Long
            Private sourceVal As String

            Public Sub New(ByVal status As Boolean, ByVal code As Long, ByVal source As String)
                statusVal = status
                codeVal = code
                sourceVal = source
            End Sub

            Public Property status() As Boolean

                Get
                    Return statusVal
                End Get
                Set(ByVal Value As Boolean)
                    statusVal = Value
                End Set
            End Property

            Public Property code() As Long
                Get
                    Return codeVal
                End Get
                Set(ByVal Value As Long)
                    codeVal = Value
                End Set
            End Property

            Public Property source() As String
                Get
                    Return sourceVal
                End Get
                Set(ByVal Value As String)
                    sourceVal = Value
                End Set
            End Property

        End Structure
    End Class
End Namespace
