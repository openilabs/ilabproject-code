Option Strict Off
Option Explicit On 

Imports System
Imports System.IO
Imports System.Runtime.InteropServices
Imports System.Threading

Namespace InstrumentDriverInterop.Ivi

    '''<summary>
    ''' This class provideds a wrapper around the Labview dlls that communicate with 
    ''' The ELVIS board for the OpAmp inverter experiment
    ''' </summary>
    Public Class Inverter
        Inherits Object
        Implements System.IDisposable

        Const SCOPETriggerSlope_POSITIVE As Integer = 0
        Const SCOPETriggerSlope_NEGATIVE As Integer = 1

        Const SCOPETriggerType_Digital As Integer = 0
        Const SCOPETriggerType_Analog As Integer = 1

        Const SCOPETriggerSource_Immediate As Integer = 0
        Const SCOPETriggerSource_TRIGGER As Integer = 1
        Const SCOPETriggerSource_SYNC_OUT As Integer = 2
        Const SCOPETriggerSource_CH_A As Integer = 3
        Const SCOPETriggerSource_CH_B As Integer = 4

        Const SCOPEChannelSource_Osc_Channel As Integer = 0
        Const SCOPEChannelSource_ACH0 As Integer = 1
        Const SCOPEChannelSource_ACH1 As Integer = 2
        Const SCOPEChannelSource_ACH2 As Integer = 3
        Const SCOPEChannelSource_ACH5 As Integer = 4
        Const SCOPEChannelSource_FGEN_FUNC_OUT As Integer = 5
        Const SCOPEChannelSource_FGEN_SYNC_OUT As Integer = 6
        Const SCOPEChannelSource_DMM_Voltage As Integer = 7

        Const SCOPEChannelCoupling_DC As Integer = 0
        Const SCOPEChannelCoupling_AC As Integer = 1

        Const SCOPEAcquireMode_N_Samples As Integer = 10178
        Const SCOPEAcquireMode_Continuous As Integer = 10123

        Const FGENWaveformType_Sine As Integer = 0
        Const FGENWaveformType_Triangular As Integer = 1
        Const FGENWaveformType_Square As Integer = 2


        ' store a handle to the ELVIS refNum 
        'Private _handle As System.IntPtr
        Private errorVal As TD1
        Private _disposed As Boolean = True
        '''<summary>
        ''' Initialize communication with ELVIS
        '''</summary>
        Public Sub New()
            Me.errorVal = New TD1(False, 0, "")
            'PInvoke.initialize(Me.errorVal, Me._handle)
            'Console.WriteLine("The handle is " & Me._handle.ToString())
            'Console.WriteLine("The error values are: status -> {0} Code -> {1} Source -> {2}", Me.errorVal.status, Me.errorVal.code, Me.errorVal.source)
            Me._disposed = False
        End Sub
        ''' <summary>
        ''' Runs an experiment given the parameters to use. returns an arrayList
        ''' with the waveform values generated by running the experiment
        ''' </summary>
        Public Function RunExperiment(ByVal DeviceName As String, ByVal frequencyHz As Double, ByVal peakAmplitudeV As Double, ByVal DCOffsetV As Double, ByVal waveformType As Short, ByVal SamplingRate As Double, ByVal SamplingTime As Double) As Double()()
            Console.WriteLine("Conducting the requested experiment")
            Console.WriteLine("The error values before the experiment are: status -> {0} Code -> {1} Source -> {2}", Me.errorVal.status, Me.errorVal.code, Me.errorVal.source)
            'calculate the length that we expect
            Dim len As Long
            Dim recordLength As Integer
            'len = Math.Floor(Math.Min(201, (SamplingRate * SamplingTime) + 1))
            recordLength = Math.Floor((SamplingRate * SamplingTime) + 1)
            len = recordLength * 2  ' since only one interleaved array is returned
            Console.WriteLine("The length of the returned array will be " & len)

            Dim waveform(len) As Double
            'Specify "Dev1" as DeviceName
            'Dim DeviceName As String = "Dev1"

            WrapPInvoke.runExperiment(DeviceName, SCOPETriggerSlope_POSITIVE, SCOPETriggerType_Analog, SCOPETriggerSource_CH_A, SCOPEChannelSource_FGEN_FUNC_OUT, 10, 0, SCOPEChannelCoupling_DC, SCOPEChannelSource_ACH0, 10, 0, SCOPEChannelCoupling_DC, recordLength, SamplingRate, SCOPEAcquireMode_N_Samples, waveformType, frequencyHz, DCOffsetV, peakAmplitudeV, waveform(0), len)
            '"Dev1", True,                                                                                   
            'parse the file and return an array with the values
            'Console.WriteLine("The error values are: status -> {0} Code -> {1} Source -> {2}", Me.errorVal.status, Me.errorVal.code, Me.errorVal.source)
            Console.WriteLine("The experiment is done")

            'extract the individual arrays
            Dim results(2)() As Double

            Dim vin() As Double
            Dim vout() As Double

            ReDim vin(len / 2)
            ReDim vout(len / 2)

            Dim j, k As Integer
            For j = 0 To len - 1
                k = j Mod 2
                If k = 0 Then
                    vin(j / 2) = waveform(j)
                Else
                    vout((j - 1) / 2) = waveform(j)
                End If
                'results(k)((j - k) / 2) = waveform(j)
            Next
            results(0) = vin
            results(1) = vout
            Return results
        End Function
#Region "disposal"
        Protected Overrides Sub Finalize()
            Me.Dispose(False)
        End Sub

        Public Overloads Sub Dispose() Implements System.IDisposable.Dispose
            Me.Dispose(True)
            System.GC.SuppressFinalize(Me)
        End Sub

        Private Overloads Sub Dispose(ByVal disposing As Boolean)
            If (Me._disposed = False) Then
                'PInvoke.close(Me.errorVal, Me.errorVal, Me._handle, Me._handle)
                'Me._handle = System.IntPtr.Zero

            End If
            Me._disposed = True
        End Sub
#End Region
       
        ''' <summary>
        ''' This struct stores the error messages returned by a DLL
        ''' </summary>
        Public Structure TD1
            Private statusVal As Boolean
            Private codeVal As Long
            Private sourceVal As String

            Public Sub New(ByVal status As Boolean, ByVal code As Long, ByVal source As String)
                statusVal = status
                codeVal = code
                sourceVal = source
            End Sub

            Public Property status() As Boolean

                Get
                    Return statusVal
                End Get
                Set(ByVal Value As Boolean)
                    statusVal = Value
                End Set
            End Property

            Public Property code() As Long
                Get
                    Return codeVal
                End Get
                Set(ByVal Value As Long)
                    codeVal = Value
                End Set
            End Property

            Public Property source() As String
                Get
                    Return sourceVal
                End Get
                Set(ByVal Value As String)
                    sourceVal = Value
                End Set
            End Property

        End Structure
    End Class

    '<DllImport("elvisv1_2.dll", CallingConvention:=CallingConvention.StdCall)> _
    Public Module WrapPInvoke

        <DllImport("elvisv1_2.dll")> _
        Public Function runExperiment(ByVal DeviceName As String, ByVal SCOPET_Slope As Integer, ByVal SCOPET_TriggerType As Integer, ByVal SCOPET_TriggerSource As Integer, ByVal SCOPEChA_Source As Integer, ByVal SCOPEChA_Range As Double, ByVal SCOPEChA_Offset As Double, ByVal SCOPEChA_Coupling As Integer, ByVal SCOPEChB_Source As Integer, ByVal SCOPEChB_Range As Double, ByVal SCOPEChB_Offset As Double, ByVal SCOPEChB_Coupling As Integer, ByVal SCOPEH_RecordLength As Integer, ByVal SCOPEH_SampleRateHz As Double, ByVal SCOPEH_Acquire As Integer, ByVal FGEN_WaveformType As Integer, ByVal FGEN_Frequency As Double, ByVal FGEN_DCOffset As Double, ByVal FGEN_Amplitude As Double, ByRef interleavedArray As Double, ByVal len As Integer) As Integer
            ''ByVal ELVIS_DeviceName As String, ByVal SCOPET_OnFGENOffset As Boolean, ByVal SCOPET_Level As Double,   
        End Function


    End Module

End Namespace
