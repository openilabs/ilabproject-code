package weblab.client;

import java.math.BigDecimal;

/**
 * Represents a sampling type specification function. A sampling
 * function contains a sampling rate and a sampling time 
 * SAMPLINGFunction is immutable
 * @author gikandi
 *
 */
public class SAMPLINGFunction extends SourceFunction {

  private BigDecimal rate;
  private BigDecimal time;
	
  /**
   * Constructs a SAMPLINGFunction with the default values
   */
  public SAMPLINGFunction(){
    this(BigDecimal.valueOf(0), BigDecimal.valueOf(0));
  }
	
  /**
   * Constructs a SAMPLINGFunction using the values passed in 
   */
  public SAMPLINGFunction(BigDecimal rate, BigDecimal time)
  {
    this.rate = rate;
    this.time = time;
  }
	
  public int getType()
  {
    return SAMPLING_TYPE;
  }

	
  public BigDecimal getRate()
  {
    return rate;
  }
	
  public BigDecimal getTime()
  {
    return time;
  }

  /**
   * Returns the number of data points that will be generated by this
   * function.
   */
  public final int calculatePoints()
  {
    if (time.signum() == 0)
      return 0;
    else
      return time
	.multiply(rate)
	.intValue()
	+ 1;
  }

  /**
   * Returns the time interval between successive data points that
   * will be generated by this function.
   *
   * Note: logically, the return value of calculateInterval() should
   * always be equal to the reciprocal of getRate() EXCEPT in cases
   * where calculatePoints() returns 1 or 0 (indicating that this
   * function does not produce multiple data points).  In these cases
   * calculateInterval() will return zero.
   */
  public final BigDecimal calculateInterval()
  {
    int nPoints = this.calculatePoints();
    if (nPoints == 0 || nPoints == 1)
      return BigDecimal.valueOf(0);
    else
      return time
	.multiply(new BigDecimal((double) 1 / (nPoints - 1)));
  }

  // two SAMPLINGFunctions are equal if they have equal values.
  public final boolean equals(Object obj)
  {
    if (obj instanceof SAMPLINGFunction)
    {
      SAMPLINGFunction f = (SAMPLINGFunction) obj;

      return (this.rate.compareTo(f.rate) == 0 &&
	      this.time.compareTo(f.time) == 0 );
    }
    else
      return false;
  }

  /**
   * Accepts a Visitor, according to the Visitor design pattern.
   */
  public void accept(Visitor v) {
    // TODO Auto-generated method stub
    v.visitSAMPLINGFunction(this);
  }

}
