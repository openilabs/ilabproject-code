/*
 * Copyright (c) 2005 The Massachusetts Institute of Technology.  All
 * rights reserved.  Please see license.txt in top level directory for
 * full license.
 */

package weblab.client;

import java.math.BigDecimal;

/**
 * Represents VAR2, the secondary sweep source.  VAR2Function consists
 * of a start value, a stop value, and a step value.
 *
 * (Note: the scale of VAR2 is always linear and cannot be changed)
 *
 * VAR2Function is immutable.
 */

public class VAR2Function extends SourceFunction
{
  private BigDecimal start;
  private BigDecimal stop;
  private BigDecimal step;

  /**
   * Creates a new VAR2Function with default values.
   */
  public VAR2Function()
  {
    this(BigDecimal.valueOf(0), BigDecimal.valueOf(0),
	 new BigDecimal("0.1"));
  }

  /**
   * Creates a new VAR1Function with the specified values.
   */
  public VAR2Function(BigDecimal start, BigDecimal stop, BigDecimal step)
  {
    this.start = start;
    this.stop = stop;
    this.step = step;
  }

  public final int getType()
  {
    return VAR2_TYPE;
  }

  /**
   * Returns the start value of this.
   */
  public final BigDecimal getStart()
  {
    return this.start;
  }

  /**
   * Returns the stop value of this.
   */
  public final BigDecimal getStop()
  {
    return this.stop;
  }

  /**
   * Returns the step value of this.
   */
  public final BigDecimal getStep()
  {
    return this.step;
  }

  /**
   * Returns the number of data points that will be generated by this
   * function.
   */
  public final int calculatePoints()
  {
    // zero step size -> badness
    if (step.signum() == 0)
      return -1;

    return stop
      .subtract(start)
      .divide(step, 0, BigDecimal.ROUND_FLOOR)
      .intValue()
      + 1;
  }

  /**
   * Compares the specified object with this VAR2Function for
   * equality.  Returns true iff the specified object is also a
   * VAR2Function and both VAR2Functions have equal start, stop, and
   * step values.
   *
   * note: BigDecimal comparison is performed using
   * BigDecimal.compareTo, not BigDecimal.equals.
   */
  public final boolean equals(Object obj)
  {
    if (! (obj instanceof VAR2Function))
      return false;
    VAR2Function f = (VAR2Function) obj;

    return (this.start.compareTo(f.start) == 0 &&
	    this.stop.compareTo(f.stop) == 0 &&
	    this.step.compareTo(f.step) == 0);
  }

  /**
   * Accepts a Visitor, according to the Visitor design pattern.
   */
  public final void accept(Visitor v)
  {
    v.visitVAR2Function(this);
  }

} // end class VAR2Function
