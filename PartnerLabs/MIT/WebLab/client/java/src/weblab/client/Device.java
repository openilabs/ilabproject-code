/*
 * Copyright (c) 2005 The Massachusetts Institute of Technology.  All
 * rights reserved.  Please see license.txt in top level directory for
 * full license.
 */

package weblab.client;

import java.util.Collections;
import java.util.List;
import java.util.ArrayList;

/**
 * Represents a microelectronics device connected to the analyzer.  A
 * Device has a deviceID, a deviceType, a name, a description, an
 * imageURL, a maximum number of data points that may be generated by
 * any experiment run on this device, and a list of Terminals.
 *
 * Device is immutable.
 */
public class Device
{
  private final int deviceID;
  private final String deviceType;
  private final String name;
  private final String description;
  private final String imageURL;
  private final int maxDataPoints;

  private final List terminals; // unmodifiable, contains Terminal

  private final String cachedImageData; // imageData from the Lab
					// Configuration, or null if
					// none exists

  /**
   * Constructs a new Device with the specified values.
   */
  public Device(int deviceID, String deviceType, String name,
		String description, String imageURL, String cachedImageData,
		int maxDataPoints, List terminals)
  {
    this.deviceID = deviceID;
    this.deviceType = deviceType;
    this.name = name;
    this.description = description;
    this.imageURL = imageURL;
    this.cachedImageData = cachedImageData;
    this.maxDataPoints = maxDataPoints;

    this.terminals = Collections.unmodifiableList(new ArrayList(terminals));
  }

  /**
   * Returns the deviceID of this.
   */
  public final int getDeviceID()
  {
    return deviceID;
  }

  /**
   * Returns the type of this device.
   */
  public final String getDeviceType()
  {
    return deviceType;
  }

  /**
   * Returns the name of this device.
   */
  public final String getName()
  {
    return name;
  }
  
  /**
   * Returns the description of this device.
   */
  public final String getDescription()
  {
    return description;
  }

  /**
   * Returns a URL pointing to an image of this device.
   */
  public final String getImageURL()
  {
    return imageURL;
  }

  /**
   * Returns the maximum number of data points that can be generated
   * by any measurement run on this device.
   */
  public final int getMaxDataPoints()
  {
    return maxDataPoints;
  }

  /**
   * Returns the Terminals of this device.
   *
   * @return unmodifiable List of Terminal
   */
  public final List getTerminals()
  {
    return this.terminals;
  }

  /**
   * Compares the specified object with this Device for equality.
   * Returns true iff the specified object is also a Device and both
   * Devices have equal values for all basic fields as well as equal
   * lists of Terminals (according to Terminal.equals).
   */
  public boolean equals(Object obj)
  {
    // check object type
    if (! (obj instanceof Device))
      return false;
    Device d = (Device) obj;

    // check all fields (hooray for List.equals!)
    return (this.deviceID == d.deviceID &&
	    this.deviceType.equals(d.deviceType) &&
	    this.name.equals(d.name) &&
	    this.description.equals(d.description) &&
	    this.imageURL.equals(d.imageURL) &&
	    (this.cachedImageData == null ? d.cachedImageData == null :
	     this.cachedImageData.equals(d.cachedImageData)) &&
	    this.maxDataPoints == d.maxDataPoints &&
	    this.terminals.equals(d.terminals));
  }

  /**
   * Accepts a Visitor, according to the Visitor design pattern.
   */
  public final void accept(Visitor v)
  {
    v.visitDevice(this);
  }

} // end class Device
