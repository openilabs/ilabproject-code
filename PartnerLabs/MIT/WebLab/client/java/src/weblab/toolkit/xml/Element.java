/*
 * Copyright (c) 2005 The Massachusetts Institute of Technology.  All
 * rights reserved.  Please see license.txt in top level directory for
 * full license.
 */

package weblab.toolkit.xml;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Iterator;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * Represents a single XML element.  Elements are generated by the
 * Parser.parse method.
 */
public class Element
{
  private String name;
  private Map attributes = new HashMap(); // maps String to String
  private StringBuffer data = new StringBuffer();
  private Element parent;
  private List children = new ArrayList(); // contains Element



  /**
   * Returns the name of this element.
   */
  public String getName()
  {
    return name;
  }



  /**
   * Returns the value for the named attribute in this element, or
   * null if no such attribute exists.
   */
  public String getAttributeValue(String name)
  {
    return (String) attributes.get(name);
  }



  /**
   * Returns the value for the named attribute in this element.
   *
   * @throws InvalidXMLException if no such attribute exists
   */
  public String getRequiredAttributeValue(String name)
    throws InvalidXMLException
  {
    String result = this.getAttributeValue(name);

    if (result == null)
      throw new InvalidXMLException
	("element <" + this.name + "> missing required attribute '"
	 + name + "'");

    return result;
  }



  /**
   * Returns the simple string data in this element, or "" if it
   * contains no string data.
   */
  public String getData()
  {
    return data.toString();
  }



  /**
   * Returns the simple string data in this element.
   *
   * @throws InvalidXMLException if this element contains no string
   * data.
   */
  public String getRequiredData() throws InvalidXMLException
  {
    String result = this.getData();

    if (result.equals(""))
      throw new InvalidXMLException
	("element <" + this.name + "> missing required string data");

    return result;
  }



  /**
   * Returns the parent element of this, or null if this has no
   * parent.
   */
  public Element getParent()
  {
    return parent;
  }



  /**
   * Returns an immutable list of all the subelements of this that
   * have the specified name.
   *
   * @return List of Element
   */
  public List getChildren(String name)
  {
    List r = new ArrayList();
    for (int i = 0, n = children.size(); i < n; i++)
    {
      Element e = (Element) children.get(i);
      if (e.getName().equals(name))
	r.add(e);
    }
    return Collections.unmodifiableList(r);
  }



  /**
   * Returns a SINGLE subelement of this with the specified name, or
   * null if no such subelement exists.
   */
  public Element getChild(String name)
  {
    List l = this.getChildren(name);
    if (! l.isEmpty())
      return (Element) l.get(0);
    else
      return null;
  }



  /**
   * Returns a single subelement of this with the specified name.
   *
   * @throws InvalidXMLException if no such subelement exists
   */
  public Element getRequiredChild(String name)
    throws InvalidXMLException
  {
    Element result = this.getChild(name);

    if (result == null)
      throw new InvalidXMLException
	("element <" + this.name + "> missing required subelement <"
	 + name + ">");

    return result;
  }



  ////////////////////////////////////////////
  // Package-visible methods used by Parser //
  ////////////////////////////////////////////

  // parent may be null
  Element(String name, Element parent)
  {
    this.name = name;
    if (parent != null)
    {
      this.parent = parent;
      this.parent.children.add(this);
    }
  }

  void addAttribute(String name, String value)
  {
    attributes.put(name, value);
  }

  void addData(String s)
  {
    data.append(s);
  }

} // end class Element
